	
(& INPUT FORMAT) 	
(& NORMALLY ALL CHARACTERS COMING IN AT THE INTERFACE PORT ARE DISPLAYED ON THE) 	
(& TEXT DISPLAY) 	
(& GRAPHICS COMMANDS ARE PREFACED BY AN ESCAPE CHARACTER 33 OCTAL) 	
(& SPECIAL CHARACTERS) 	
(CALL 0 NUL-CHR & NULL) 	
(CALL 7 BL-CHR & CURSOR TO START OF LINE) 	
(CALL 10 BS-CHR & BACKSACE) 	
(CALL 11 TAB-CHR & TAB MOD 10) 	
(CALL 12 LF-CHR & LINE FEED) 	
(CALL 13 DOWN-CHR & CURSOR DOWN) 	
(CALL 15 CR-CHR & NEW LINE) 	
(CALL 17 TOGGLE-CURSOR-MODE & HIDE IF SHOWN OR SHOW IF HIDDEN) 	
(CALL 21 QUOTE-CHR & NEXT CHR HAS NO SPECIAL MEANING) 	
(CALL 30 RT-CHR & CURSOR RIGHT) 	
(CALL 31 LEFT-CHR & CURSOR LEFT) 	
(CALL 32 UP-CHR & CURSOR UP) 	
(CALL 33 FLAG-CHR & ESCAPE TO COMMAND MODE) 	
(CALL 34 HM-DN-CHR & CURSOR TO LOWER RIGHT CORNER) 	
(CALL 35 HM-UP-CHR & CURSOR TO UPPER RIGHT CORNER) 	
(CALL 36 CLR-EOL & CLEAR TO END OF LINE) 	
(CALL 37 CLR-EOF & CLEAR TO END OF PAGE) 	
(CALL 177 DEL-CHR & DELETE IS JUST LIKE NULL) 	
(& CHARACTERS BETWIXT 100 AND 137 OCTAL INCLUSIVE ARIVING AFTER AN ESCAPE WILL) 	
(& BE EXPECTED IN GROUPS OF THREE THE 5 LEAST SIGNIFICANT BITS OF THESE 3 CHRS WILL) 	
(& BE CONS UP INTO A 15 BIT DISPLAY LIST INSTRUCTION LAST CHR IS LEAST SIGNIFICANT) 	
(& THIS DISPLAY INSTRUCTION IS ADDED TO THE TOP OF THE DISPLAY LIST) 	
(& OP CODES ARE AS FOLLOWS) 	
(& /000 00X XXX XXX XXX NOP) 	
(& /000 /100 0XX XXX XXX HOME) 	
(& /000 /100 1XX XXX /000 PENDONW) 	
(& /000 /100 1XX XXX /001 SMALL DOT) 	
(& /000 /100 1XX XXX /010 DOT) 	
(& /000 /100 1XX XXX /011 WIDE DOT) 	
(& /000 /100 1XX XXX /100 DASH) 	
(& /000 /100 1XX XXX /101 DASH DOT) 	
(& /000 /100 1XX XXX /110 WIDE DASH) 	
(& /000 /100 1XX XXX /111 PENDOWN) 	
(& /000 /101 0XX XXX XX1 SHOWTURTLE) 	
(& /000 /101 0XX XXX /000 HIDETURTLE) 	
(& /000 /101 1XX XXX XXX ENDSNAP) 	
(& /000 /110 0XX XXX XXX BLINK) 	
(& /000 /110 1XX XXX XX0 WRAP) 	
(& /000 /110 1XX XXX XX1 BOUNCE) 	
(& /000 /111 0XX XXX XXX RESET) 	
(& /000 /111 1XX XXX XXX NOP) 	
(& /001 0DD DDD DDD DDD FORWARD DISTANCE) 	
(& /001 1AA AAA AAA AAA RIGHT ANGLE) 	
(& /010 0HH HHH HHH HHH SETHEADING HEADING) 	
(& /010 1SS SSS SSS SSS MOVE SPEED) 	
(& /011 0SS SSS SSS SSS SPIN SPEED) 	
(& /011 1XX XXX XXX XXX DISPLAY ADDRESS IN NEXT WORD) 	
(& /100 0CC CCC CCC CCC SETXY XCOR YCOR IN NEXT WORD) 	
(& /100 1DD DDD DDD DDD DELTAXY DX DY IN NEXT WORD) 	
(& /101 /000 /000 /000 /000 CLEARSCREEN) 	
(& /101 01N NNN NNN NNN REMOVE -N INSTRUCTIONS FROM THE DISPLAY LIST) 	
(& 11X XXX XXX XXX XXX ERROR) 	
(& GRAHIC REGISTER ALLOCATION) 	
(CALL 2 XPOS & LSB (QUOTE S) OF X POSITION) 	
(CALL 3 YPOS & LSB (QUOTE S) OF Y POSITION) 	
(CALL 4 SIN & SINE OF HEADING) 	
(CALL 5 COS & COSE OF HEADING) 	
(CALL 6 HEADING & HEADING OF TURTLE) 	
(CALL 7 PC & POINTER TO DISPLAY LIST INSTRUTION BEING EXECUTED) 	
(& SCRATCH PAD ALLOCATION) 	
(CALL 40 ISAV-1 & FOR SAVING REGS DURING INTERRUPTS) 	
(CALL 41 ISAV-2) 	
(CALL 42 ISAV-3) 	
(CALL 43 ISAV-4) 	
(CALL 44 ISAV-5) 	
(CALL 45 SCRATCH & NEVER TRUST A SUBR WITH THIS ONE) 	
(CALL 46 TOP-LINE & TOP LINE ON SCREEN) 	
(CALL 47 SCR-VALUE & SCROLL) 	
(CALL 50 BACK-SCRATCH & NOT FOR SCRATCHING BACKS BUT FOR BACK (QUOTE S) SCRATCHING) 	
(CALL 51 CONS-CELL & FOR CONSING UP DISPAY INSTRUCTIONS) 	
(CALL 52 READ-STATE & DEPENDS ON WHAT CHARS HAVE COME IN) 	
(CALL 53 SNAP-STACK & POINTER TO MACRO STACK) 	
(CALL 54 MOVE-PEN & STOREING PEN-STATE WHILE IN MOVE) 	
(CALL 57 SPIN-ANGLE & LIKE CLOCK MODE 360) 	
(CALL 60 WRAP-MODE & ONE IF TURTLE SHOULD WRAP ELSE ZERO) 	
(CALL 61 SYNCH-FLAG & SYMAPHORE TO SYNCHRONIZE REFRESH AND CLOCK) 	
(CALL 62 CLOCK & TIME INCREMENTED EVERY CLOCK CYCLE) 	
(CALL 63 IN-BUFFER & COMMUNICATIONS LINK INPUT BUFFER POINTER) 	
(CALL 64 OUT-BUFFER & COMMUNICATIONS LINK OUTPUT BUFFER) 	
(CALL 65 DISPLAY-TOP & TOP OF DISPLAY LIST) 	
(CALL 66 DSR-STATE & COPY OF DISPLAY STATUS REGISTER) 	
(CALL 67 TURTLE-STATE & ZERO IF TURTLE IS HIDDEN ELSE MINUS ONE) 	
(CALL 70 LINE & START ADDRESS OF CURRENT TEXT LINE DISPLAYED) 	
(CALL 71 CRSR-LINE & START ADDRESS OF TEXT LINE WITH CURSOR) 	
(CALL 72 CRSR-COL & TEXT COLUMN 0-71 OF CURSOR) 	
(CALL 73 CRSR-REPL & CHARACTER THAT CURSOR IS SITTING ON) 	
(CALL 74 HIDE-CURSOR & ZERO TO SHOW CURSOR -1TO HIDE) 	
(CALL 76 FLASH-TIME & COUNTER FOR SCREEN FLASH FOR CONTROL-G) 	
(& MEMORY ALLOCATION) 	
(CALL 0 TRIG-TABLE-START) 	
(CALL 133 IN-BUFFER-START) 	
(CALL 144 SNAP-STACK-START) 	
(CALL 170 SNAP-STACK-END) 	
(CALL 170 DISPLAY-LIST-START) 	
(CALL 4546 BIGFONT-START) 	
(CALL 5546 SNAP-BUFFER-START) 	
(CALL 5710 TEXT-START) 	
(CALL 7777 TEXT-END) 	
(& INTERUPT SERVICE ROUTINE) 
	SERV-INTERUPT	140	76040	(PUT 0 ISAV-1 & IT IS ORE BLESSED TO SERVE THAN TO RECIEVE)
			141	76141	(PUT 1 ISAV-2)
			142	73200	(DIS INTS 7)
			143	50143	(ERROR & INTERUPT WENT AWAY)
			144	51121	(JUMP TV-LINE & TEXTDISPLAY IS 1)
			145	50322	(JUMP SERV-IN & CHARACTER COMING IN ON INTERFACE)
			146	51121	(JUMP TV-LINE & TV-LINE HAS PRIORITY)
			147	50306	(JUMP SERV-CLOCK & 60TH OF A SEC INTERUPT)
			150	51121	(JUMP TV-LINE & TV-LINE HAS PRIORITY)
			151	50306	(JUMP SERV-CLOCK & CLOCK HAS PRIORITY)
			152	51121	(JUMP TV-LINE & THOU SHALT HAVE NO OTHER BEFOR HIM)	
(& INITIALIZE ALL) 
	START		153	40155	(PUSHJ INIT & WE HOPE THIS IS A NOP)
			154	50154	(ERROR & CAUSE THIS MEANS STACK UNDERFLOW)
	INIT		155	6000	(SUB 0 0)
			156	76074	(PUT 0 HIDE-CURSOR)
			157	76076	(PUT 0 FLASH-TIME)
			160	76051	(PUT 0 CONS-CELL)
			161	76052	(PUT 0 READ-STATE)
			162	76057	(PUT 0 SPIN-ANGLE)
			163	76062	(PUT 0 CLOCK)
			164	76061	(PUT 0 SYNCH-FLAG)
			165	76053	(PUT 0 SNAP-STACK)
			166	76063	(PUT 0 IN-BUFFER)
			167	76060	(PUT 0 WRAP-MODE)
			170	6040	(INC 0)
			171	76067	(PUT 0 TURTLE-STATE)
			172	60	(NOR 0 0)
			173	76064	(PUT 0 OUT-BUFFER)
			174	1000	(LOD 0)
			175	170	(DISPLAY-LIST-START)
			176	76065	(PUT 0 DISPLAY-TOP)
			177	1000	(LOD 0)
			200	377	(377)
			201	76021	(PUT 0 XCOR)
			202	76020	(PUT 0 YCOR)
			203	41213	(PUSHJ TV-INIT)
	NEXT-TIME	204	40470	(PUSHJ CENTER)	
(& MAIN LOOP OF THE DISPLAY PROGRAM) 
	WAIT		205	41117	(PUSHJ CHECK-INTS)
			206	40300	(PUSHJ CHECK-FLAG)
			207	74063	(GET 0 IN-BUFFER & CHECK IF THERE ARE CHARACTERS IN THE BUFFER)
			210	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			211	130004	(BNE SERV-IN-BUFFER & IF NOT WAIT SOME MORE)
			212	74061	(GET 0 SYNCH-FLAG & HAS A 60 CYCLE INTERUPT COME ?)
			213	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			214	137770	(BEQ WAIT & IF SO REFRESH VECTORS)
			215	50371	(JUMP REFRESH)
	SERV-IN-BUFFER	216	4020	(DEC 0 & GET A CHAR FROM FIFO)
			217	76063	(PUT 0 IN-BUFFER & COUNT OF STUFF)
			220	5760	(ADDI PC 0)
			221	133	(IN-BUFFER-START & THE END OF THE BUFFER)
	MOVE-FIFO	222	20702	(READ PC 2 & MOVE DOWN THE BUFFER)
			223	10000	(NOP 0 & **** JUUST TEMP)
			224	24721	(WRITED PC 1)
			225	17007	(CMPI PC)
			226	132	(- IN-BUFFER-START 1)
			227	134002	(BEQ GOBBLER & GOBBLES DOWN A CHARACTER)
			230	74102	(GET 1 2)
			231	50222	(JUMP MOVE-FIFO)
	GOBBLER		232	74152	(GET 1 READ-STATE & HAVE WE JUST GOTTEN A FLAG?)
			233	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			234	120016	(BMI QUOTED & NO SPECIAL MEANING)
			235	134021	(BEQ TEXT-ADD & IF NOT TEXT-ADD CHECK FOR FLAG)
			236	74351	(GET 3 CONS-CELL & GET PREVIOUS WORK)
			237	4313	(ROT 3 13)
			240	1042	(ANDI 0 2 & ADD IN 5 BITS)
			241	37	(37)
			242	4063	(ADD 0 3)
			243	76051	(PUT 0 CONS-CELL & SAVE IT)
			244	4120	(DEC 1 & CHANGE STATE)
			245	76152	(PUT 1 READ-STATE)
			246	133736	(BNE WAIT & MORE TO COME)
			247	74365	(GET 3 DISPLAY-TOP & ADD TO DISPLAY LIST)
			250	26340	(WRITEI 3 0)
			251	76365	(PUT 3 DISPLAY-TOP)
			252	50205	(JUMP WAIT)
	QUOTED		253	6101	(SUB 1 1 & TURN OFF QUOTE MODE)
			254	76152	(PUT 1 READ-STATE)
			255	41364	(PUSHJ TV-QUOTE)
			256	50205	(JUMP WAIT)
	TEXT-ADD	257	17002	(CMPI 2 & CHECK FOR QOTE CHR)
			260	21	(QUOTE-CHR)
			261	134010	(BEQ SET-QUOTE)
			262	17002	(CMPI 2 & CHECK FOR ALT MADE CHAR)
			263	33	(FLAG-CHR)
			264	130011	(BNE TEXT-CHAR & FOR TEXT DISPLAY)
			265	76151	(PUT 1 CONS-CELL & IF SO CLEAR CONS-CELL)
			266	1000	(LOD 0 & MAKE READ-STATE 3)
			267	3	(3)
			270	76052	(PUT 0 READ-STATE)
			271	50205	(JUMP WAIT)
	SET-QUOTE	272	1000	(LOD 0 & TURN ON QUOTE MODE FOR ONE CHR)
			273	-1	(-1)
			274	76052	(PUT 0 READ-STATE)
			275	50205	(JUMP WAIT)
	TEXT-CHAR	276	41255	(PUSHJ TV-CHAR)
			277	50205	(JUMP WAIT)
	CHECK-FLAG	300	72700	(DIS FLAGS 3)
	POP-PLACE	301	75600	(POPJ)
			302	50336	(JUMP SERV-KEY & KEYBOARD IS 1)
			303	50346	(JUMP SERV-OUT & OUTPUT TO INTERFACE IS 2)
			304	40346	(PUSHJ SERV-OUT & DO THEM BOTH)
			305	50336	(JUMP SERV-KEY)
	SERV-CLOCK	306	74062	(GET 0 CLOCK & INCREMENT CLOCK)
			307	6040	(INC 0)
			310	76062	(PUT 0 CLOCK)
			311	74057	(GET 0 SPIN-ANGLE & UPDATE SPIN-ANGLE)
			312	6040	(INC 0)
			313	1100	(LOD 1)
			314	55000	(* 550 100)
			315	41012	(PUSHJ TOO-LOW & NORMALIZE)
			316	76057	(PUT 0 SPIN-ANGLE)
			317	6040	(INC 0 & TO GARRANTEE A NON ZERO-NUMBER)
			320	76061	(PUT 0 SYNCH-FLAG & AND LET REFRESH START IF WAITING)
			321	51146	(JUMP TV-PAGE)
	SERV-IN		322	74063	(GET 0 IN-BUFFER & PUT IT IN FIFO)
			323	5160	(ADDI 1 0)
			324	133	(IN-BUFFER-START)
			325	6040	(INC 0)
			326	76063	(PUT 0 IN-BUFFER)
			327	74024	(GET 0 UART)
			330	1040	(ANDI 0 0 & UART GIVES RANDOM HIGH BITS)
			331	377	(377)
			332	24100	(WRITE 1 0 & UARTS ARE REALLY SLOW)
			333	74040	(GET 0 ISAV-1)
			334	74141	(GET 1 ISAV-2)
			335	75600	(POPJ & SO THIS CAN NOT BE A JUMP CHECK-INTS)
	SERV-KEY	336	74064	(GET 0 OUT-BUFFER & ADD BUFFER IS JUST ONE LONG)
			337	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			340	124556	(BPL CHECK-INTS & BUT YOU CAN TYPE FASTER THAN 60 CPS)
			341	74026	(GET 0 KEY & BUT NOT FASTER THAN 120 CPS)
			342	1040	(ANDI 0 0 & KEYBOARD GIVES RANDOM HIGH BITS)
			343	377	(377 & GIVE UNTO OUTPUT AS INPUT HAS GIVEN TO YOU)
			344	76064	(PUT 0 OUT-BUFFER)
			345	75600	(POPJ)
	SERV-OUT	346	74064	(GET 0 OUT-BUFFER)
			347	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			350	120546	(BMI CHECK-INTS & IS THERE SOMETHING TO SEND OUT?)
	CHOUT		351	1100	(LOD 1 & THIS ROTEN REVERSER *****)
			352	-7	(-7)
			353	76123	(PUT 1 XR & ONLY FOR THE PERMAMA MACHINE ****)
	AGAIN		354	4161	(ADD 1 1)
			355	4001	(ROT 0 1)
			356	124001	(BPL NBIT)
			357	6140	(INC 1)
	NBIT		360	167773	(BXSI AGAIN & END SICK PATCH ****)
			361	76124	(PUT 1 UART & SEND OUT THE CHARACTER)
			362	10100	(NOP 1 & UARTS ARE SLOW)
			363	10100	(NOP 1 & VERY SLOW)
			364	10100	(NOP 1 & VERY VERY SLOW)
			365	1100	(LOD 1 & MAKE A NOTE THAT THE DEED WAS DONE)
			366	-1	(-1)
			367	76164	(PUT 1 OUT-BUFFER & THIS IS A NEGATIVE NUMBER)
			370	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)	
(& REFRESH - ONCE EVERY 60TH OF A SEC) 
	REFRESH		371	1700	(LOD PC)
			372	170	(DISPLAY-LIST-START)
			373	40470	(PUSHJ CENTER)
			374	76661	(PUT HEADING SYNCH-FLAG & A HANDY ZERO)
			375	74200	(GET XPOS 0)
			376	74300	(GET YPOS 0)
	NEXT		377	22740	(READI PC 0 & INC POINTER AND GET INSTUCTION)
			400	74153	(GET 1 SNAP-STACK & DON'T CHECK DISPLAT TOP INSIDE SNAPS)
			401	10100	(NOP 1 & GET DOESN'T SET CONDITIONS)
			402	130003	(BNE DONT-LOOK-NOW & BUT SOMETHINGS ON THE STACK)
			403	74165	(GET 1 DISPLAY-TOP)
			404	16107	(CMP 1 PC & ARE WE DONE)
			405	120002	(BMI TURTLE & YES DRAW TURTLE)
	DONT-LOOK-NOW	406	40434	(PUSHJ DISPATCH & SO THAT ALL IS SUBR'S)
			407	50377	(JUMP NEXT)
	TURTLE		410	40477	(PUSHJ PEN-DOWN & SHOULD BE DOWN FOR NEXT REFRESH)
			411	74167	(GET 1 TURTLE-STATE & THIS DRAWS A TRIANGULAR TURTLE)
			412	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			413	137570	(BEQ NEXT-TIME & IF IT IS SHOWING)
			414	1700	(LOD PC)
			415	422	(TURTLE-PROG)
	T-LOOP		416	6740	(INC PC)
			417	21000	(CREAD 0)
			420	137563	(BEQ NEXT-TIME & LIST ENDS WITH A 0)
			421	40434	(PUSHJ DISPATCH & EXECUTE IT)
	TURTLE-PROG	422	50416	(JUMP T-LOOP & TAG SHOULD BE HERE)
			423	17646	(17646 & LT 132)
			424	10007	(10000 7 & FD 7)
			425	14207	(14000 207 & RT 207)
			426	10012	(10000 12 & FD 12)
			427	14132	(14000 132 & RT 132)
			430	10012	(10000 12 & FD 12)
			431	14207	(14000 207 & RT 207)
			432	10007	(10000 7 & FD 7)
			433	0	(0 & END-TAG)
	DISPATCH	434	14017	(T ROT 0 -1 & MUST LOOK AT THE MOST SIG BITS)
			435	72000	(DIS BUS 17 & DISPLAY LIST OP CODES)
			436	50436	(ERROR & 0)
			437	50650	(JUMP SETXY & 10)
			440	50676	(JUMP SETHEADING & 4)
			441	50441	(ERROR & 12)
			442	50564	(JUMP FORWARD & 2)
			443	50543	(JUMP CLEAR-DISPLAY & 10)
			444	50702	(JUMP SPIN & 6)
			445	50445	(ERROR & 14)
			446	50456	(JUMP SPECIAL & 1)
			447	50641	(JUMP DELTAXY & 11)
			450	50706	(JUMP MOVE & 5)
			451	50451	(ERROR & 13)
			452	50636	(JUMP RIGHT & 3)
			453	50453	(ERROR & 11)
			454	50524	(JUMP DISPLAY & 7)
			455	50455	(ERROR & 15)
	SPECIAL		456	14013	(T ROT 0 -5 & LOOK AT NEXT MOST SIG BITS)
			457	72200	(DIS BUS 7 & SPECIAL DISPLAY LIST OP CODES)
			460	50471	(JUMP HOME & 0)
			461	50556	(JUMP BLINK & 4)
			462	50503	(JUMP SET-TURTLE & 2)
			463	50155	(JUMP INIT & 6)
			464	50500	(JUMP SET-PEN & 1)
			465	50507	(JUMP SET-WRAP & 5)
			466	50513	(JUMP ENDSNAP & 3)
			467	75600	(POPJ & 7)	
(& DISPLAY LIST INSTRUCTIONS) 	
(& SPECIAL INSTRUNTIONS FIRST) 
	CENTER		470	40772	(PUSHJ T-PENUP)
	HOME		471	1400	(LOD SIN & CENTER OF SCREEN)
			472	377	(377)
			473	74504	(GET COS SIN)
			474	6606	(SUB 6 6 & SO STXY WILL DO A SETHEADING 0)
			475	40660	(PUSHJ STXY)
			476	50767	(JUMP RESTORE-DSR)
	PEN-DOWN	477	6000	(SUB 0 0)
	SET-PEN		500	40774	(PUSHJ SET-DSR-PEN)
			501	76066	(PUT 0 DSR-STATE)
			502	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	SET-TURTLE	503	1040	(ANDI 0 0 & ONE TO SHOW TURTLE 0 TO HIDE HER)
			504	1	(1)
			505	76067	(PUT 0 TURTLE-STATE)
			506	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	SET-WRAP	507	1040	(ANDI 0 0 & ONE SHE WRAPS ZERO SHE DON'T)
			510	1	(1)
			511	76060	(PUT 0 WRAP-MODE)
			512	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	ENDSNAP		513	74153	(GET 1 SNAP-STACK & THIS IS A MACRO POPJ)
			514	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			515	134354	(BEQ MAKE-SNAP & ATTEMPT TO POP MEANS MAKE A SNAP)
			516	4120	(DEC 1)
			517	76153	(PUT 1 SNAP-STACK)
			520	5161	(ADDI 1 1)
			521	144	(SNAP-STACK-START)
			522	20107	(READ 1 PC)
			523	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	DISPLAY		524	40724	(PUSHJ FETCH-ARG & GETS ARG FROM NEXT WD)
			525	10100	(NOP 1)
			526	137552	(BEQ POP-PLACE & END OF DISPLAY LIST)
			527	74153	(GET 1 SNAP-STACK)
			530	5161	(ADDI 1 1)
			531	144	(SNAP-STACK-START)
			532	17001	(CMPI 1)
			533	170	(SNAP-STACK-END)
	ERR5		534	137777	(BEQ ERR5)
			535	24107	(WRITE 1 PC)
			536	74700	(GET PC 0)
			537	74153	(GET 1 SNAP-STACK)
			540	6140	(INC 1)
			541	76153	(PUT 1 SNAP-STACK)
			542	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	CLEAR-DISPLAY	543	41004	(PUSHJ GETARG & FOR CLEARING DISPLAY LIST)
			544	10000	(NOP 0 & NEGATIVE ARG MEANS ITS A DELTA)
			545	124004	(BPL SET-TOP & POSITIVE VAULES BECOME NEW LENGTH)
			546	74165	(GET 1 DISPLAY-TOP)
			547	4061	(ADD 0 1)
			550	4020	(DEC 0 & TO FLUSH ITSELF)
			551	50554	(JUMP PUT-TOP)
	SET-TOP		552	5060	(ADDI 0 0)
			553	170	(DISPLAY-LIST-START)
	PUT-TOP		554	76065	(PUT 0 DISPLAY-TOP)
			555	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	BLINK		556	74162	(GET 1 CLOCK & BLINKS AT ABOUT TWICE A SEC)
			557	4105	(ROT 1 5)
			560	123716	(BMI PEN-DOWN)
	PEN-UP		561	1000	(LOD 0)
			562	7	(7)
			563	50500	(JUMP SET-PEN)
	FORWARD		564	41004	(PUSHJ GETARG & GET SIGNED ARG)
	FD-BK		565	10000	(NOP 0)
			566	124011	(BPL FD & BUT UNLESS IT IS POSITIVE)
			567	40571	(PUSHJ INVERT-STUFF & INVERT SIN COS AND DISTANCE)
			570	40600	(PUSHJ FD & DID YOU NOTICE THE TRICKY SUBROUTINE CALL?)
	INVERT-STUFF	571	7000	(SUBI 0 0 & UN DO IT WITH THE SAME CODE)
			572	0	(0)
			573	7404	(SUBI SIN SIN)
			574	0	(0)
			575	7505	(SUBI COS COS)
			576	0	(0)
			577	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	FD		600	4060	(ADD 0 0 & SHIFT)
			601	7000	(SUBI 0 0 & COMPLEMENT)
			602	1	(1)
			603	76023	(PUT 0 XR)
			604	10000	(NOP 0 & MUST KEEP IT ON THE BUS)
	CONTINUE-FD	605	75400	(MAGIC & MAGIC VECTOR INSTRUCTION)
			606	4365	(ADD 3 5 & AND ITS HELPER)
			607	6305	(SUB 3 5 & UNDO EXTRA VECTOR STEP)
			610	73740	(DIS STARS 1 & SKIP IF NOT WRAP)
			611	50613	(JUMP OFF-SCREEN)
			612	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	OFF-SCREEN	613	74021	(GET 0 XCOR & SO WE CAN SEE IF IT WRAPS AGAIN)
			614	1040	(ANDI 0 0 & IT SHOULD BE JUST NINE BITS)
			615	777	(777)
			616	76021	(PUT 0 XCOR)
			617	74020	(GET 0 YCOR)
			620	1040	(ANDI 0 0)
			621	777	(777)
			622	76020	(PUT 0 YCOR)
			623	74060	(GET 0 WRAP-MODE & WHAT MADE ARE WE IN?)
			624	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			625	130271	(BNE CHECK-INTS & 1 IS FALL MODE)
	WRAP		626	40772	(PUSHJ T-PENUP & WRAP IS ON WHENN SET)
			627	1000	(LOD 0)
			630	400	(400 & WRAP DELAY JUST A GUESS)
	WRAP-LOOP	631	41117	(PUSHJ CHECK-INTS & KILL ENOUGH TIME TO GET AROUND)
			632	4020	(DEC 0)
			633	127775	(BPL WRAP-LOOP)
			634	40767	(PUSHJ RESTORE-DSR)
			635	50605	(JUMP CONTINUE-FD & WE ALL SHOULD)
	RIGHT		636	41004	(PUSHJ GETARG & GET SIGNED ARGUMENT)
	RT		637	4066	(ADD 0 HEADING & JUMP HERE IF YOU HAVE YOU ARG IN ZERO)
			640	50677	(JUMP SETH)
	DELTAXY		641	41004	(PUSHJ GETARG & DELTA X IS IN WORD)
			642	74400	(GET SIN 0)
			643	40724	(PUSHJ FETCH-ARG & DELTA Y IS NEXT IN LINE)
			644	10100	(NOP 1)
			645	134251	(BEQ CHECK-INTS & BUT MAY NOT HAVE ARRIVED YET)
			646	74500	(GET COS 0)
			647	50670	(JUMP DELXY & DO THE DEED)
	SETXY		650	41004	(PUSHJ GETARG & FIRST ARG IN THIS WORD)
			651	5460	(ADDI SIN 0 & NEW X STORED IN SIN)
			652	377	(377 & IN PEOPLE CORDIATES)
			653	40724	(PUSHJ FETCH-ARG & A TWO WORD INSTRUCTION)
			654	10100	(NOP 1)
			655	134241	(BEQ CHECK-INTS & OTHER ARG NOT THERE YET)
			656	5560	(ADDI COS 0 & NEW Y STORED IN COS)
			657	377	(377)
	STXY		660	74021	(GET 0 XCOR & JUMP HERE IF ARGS ARE IN SIN AND COS)
			661	1040	(ANDI 0 0 & THOW SHALT NOT BE RANDOM)
			662	777	(777 & IN THINE HIGHEST PLACES)
			663	74120	(GET 1 YCOR & LEST THY LOWEST BITS BE RANDOM LIKEWISE)
			664	1141	(ANDI 1 1)
			665	777	(777)
			666	6400	(SUB SIN 0 & DETLA X)
			667	6501	(SUB COS 1 & DELTA Y)
	DELXY		670	4411	(ROT SIN 11 & JUMP HERE WITH ARGS IN SIN AND COS)
			671	4511	(ROT COS 11)
			672	1000	(LOD 0 & ALWAYS GOES 400 STEPS)
			673	400	(400 & THERE IS ROOM FOR IMPROVEMENT HERE)
			674	40600	(PUSHJ FD)
			675	51022	(JUMP TRIG-LOOKUP & RESTORE SIN AND COS)
	SETHEADING	676	41004	(PUSHJ GETARG & LEAVE SIGNED ARGUMENT IN ZERO)
	SETH		677	41010	(PUSHJ NORMALIZE & PUSHJ TO HERE IF ARG IS ALREADY IN ZERO)
			700	74600	(GET HEADING 0 & BEND DOWN AND TOUCH YOUR TOES)
			701	51022	(JUMP TRIG-LOOKUP & GET SIN AND COS)
	SPIN		702	41004	(PUSHJ GETARG)
			703	74157	(GET 1 SPIN-ANGLE & JUST A TIME DEPENDENT RIGHT)
			704	40730	(PUSHJ POS-MULTIPLY)
			705	50637	(JUMP RT & NOTH'N TO IT)
	MOVE		706	76045	(PUT 0 SCRATCH)
			707	40772	(PUSHJ T-PENUP)
			710	74166	(GET 1 DSR-STATE & OLD STATE IS)
			711	76154	(PUT 1 MOVE-PEN & WHAT TO RESTORE THE PEN TO)
			712	76066	(PUT 0 DSR-STATE & SO PEN WON (QUOTE T) COME UP WHILE WRAPING)
			713	74045	(GET 0 SCRATCH)
			714	41004	(PUSHJ GETARG)
			715	74162	(GET 1 CLOCK)
			716	40730	(PUSHJ POS-MULTIPLY & THIS IS SIMPLE BUT HAS A BUG)
			717	74001	(GET 0 1 & TURTLE WILL JERK WHILE MOVING ON AN ANGLE)
			720	40565	(PUSHJ FD-BK)
			721	74054	(GET 0 MOVE-PEN)
			722	76066	(PUT 0 DSR-STATE & RESTORE)
			723	50770	(JUMP PUT-DSR)	
(& UTILITY SUBRS) 
	FETCH-ARG	724	74165	(GET 1 DISPLAY-TOP & GET ARG FROM NEXT WORD IN DISPLAY LIST)
			725	6107	(SUB 1 PC & LEAVE EQ FLAG SET IF ARG NOT THERE)
			726	22740	(READI PC 0)
			727	75600	(POPJ)
	POS-MULTIPLY	730	76245	(PUT 2 SCRATCH & POS NUM IN 1 TIMES NUM IN 0 TO 0)
			731	1200	(LOD 2)
			732	-17	(-17)
			733	76223	(PUT 2 XR & WE USE THE IR TO ITERATE 16 TIMES)
			734	10000	(NOP 0 & IF NUMBER IN ZERO IS NEG)
			735	124007	(BPL BOTH-POS)
			736	40742	(PUSHJ CMPL0 & CMPLEMENT IT)
			737	40745	(PUSHJ BOTH-POS & MULTIPLY)
			740	7101	(SUBI 1 1 & COMPLEMENT THE SHORT ANSWER)
			741	0	(0)
	CMPL0		742	7000	(SUBI 0 0 & AND CMPLEMENT ANSWER)
			743	0	(0)
			744	75600	(POPJ)
	BOTH-POS	745	6202	(SUB 2 2 & RESULT WILL APPEAR HERE)
	POS-MULT-LOOP	746	4262	(ADD 2 2 & CLEARS THE CARRY)
			747	4141	(XADD 1 1 & REG ONE MUST BE POSITIVE)
			750	100002	(BCC NO-ADD)
			751	4260	(ADD 2 0 & REG ZERO CAN BE EITHER)
			752	36140	(IFC INC 1 & TO PUT THE HIGH BITS IN 1)
	NO-ADD		753	167772	(BXSI POS-MULT-LOOP)
			754	4206	(ROT 2 6 & GET NUMBER DIVED BY 100 IN 0)
			755	1042	(ANDI 0 2 & TEN BITS COME FROM THIS WORD)
			756	1777	(1777)
			757	1141	(ANDI 1 1 & SIX FROM THIS ONE)
			760	77	(77)
			761	4106	(ROT 1 6)
			762	4061	(ADD 0 1)
			763	1140	(ANDI 1 0 & ONLY 11 BITS FOR MOVE)
			764	777	(777 & DO IT HERE SO THE SIGN IS RIGHT)
			765	74245	(GET 2 SCRATCH)
			766	75600	(POPJ)
	RESTORE-DSR	767	74066	(GET 0 DSR-STATE)
	PUT-DSR		770	76025	(PUT 0 DSR)
			771	75600	(POPJ)
	T-PENUP		772	1000	(LOD 0 & TEMPORARY PEN UP)
			773	7	(7)
	SET-DSR-PEN	774	74166	(GET 1 DSR-STATE)
			775	1141	(ANDI 1 1)
			776	17777	(17777)
			777	1040	(ANDI 0 0)
			1000	7	(7)
			1001	4003	(ROT 0 3)
			1002	4061	(ADD 0 1)
			1003	50770	(JUMP PUT-DSR)
	GETARG		1004	4013	(ROT 0 13 & EXTRACTS 11 BIT SIGNED ARG FROM 0)
			1005	6063	(ARS 0 3)
			1006	6062	(ARS 0 2)
			1007	75600	(POPJ)
	NORMALIZE	1010	1100	(LOD 1 & NORMALIZES -1 < REG 0 < 550)
			1011	550	(550)
	TOO-LOW		1012	10000	(NOP 0 & JUMP HERE FOR OTHER NORMS)
			1013	124002	(BPL TOO-HIGH)
			1014	4061	(ADD 0 1)
			1015	51012	(JUMP TOO-LOW & KEEP ADDING REG 1 UNTIL IT IS POSITIVE)
	TOO-HIGH	1016	6001	(SUB 0 1 & DONE LIKE THIS TO SAVE REGISTERS)
			1017	127776	(BPL TOO-HIGH)
			1020	4061	(ADD 0 1)
			1021	75600	(POPJ)
	TRIG-LOOKUP	1022	74106	(GET 1 HEADING & FINDS SIN AND COS OF HEADING)
			1023	1000	(LOD 0 & FROM 110 WORD SINE TABLE)
			1024	132	(132)
			1025	6100	(SUB 1 0 & WHICH QUADRANT?)
			1026	120007	(BMI QUAD1)
			1027	6100	(SUB 1 0)
			1030	120011	(BMI QUAD2)
			1031	6100	(SUB 1 0)
			1032	120013	(BMI QUAD3)
			1033	6100	(SUB 1 0)
			1034	120015	(BMI QUAD4)
			1035	51035	(ERROR & HEADING IS NOT LESS THAN 360)
	QUAD1		1036	41056	(PUSHJ GETTRIG & THIS WILL GET THE RIGHT MAGINTUDES)
			1037	4460	(ADD SIN 0 & BUT THEY NEED TO BE SORTED WITH)
			1040	4561	(ADD COS 1 & REAGARD TO SIGN AND PHASE)
			1041	75600	(POPJ)
	QUAD2		1042	41056	(PUSHJ GETTRIG)
			1043	4461	(ADD SIN 1)
			1044	6500	(SUB COS 0)
			1045	75600	(POPJ)
	QUAD3		1046	41056	(PUSHJ GETTRIG)
			1047	6400	(SUB SIN 0)
			1050	6501	(SUB COS 1)
			1051	75600	(POPJ)
	QUAD4		1052	41056	(PUSHJ GETTRIG)
			1053	6401	(SUB SIN 1)
			1054	4560	(ADD COS 0)
			1055	75600	(POPJ)
	GETTRIG		1056	4160	(ADD 1 0 & JUST TO GET THINGS POSITIVE)
			1057	5061	(ADDI 0 1)
			1060	0	(TRIG-TABLE-START)
			1061	20004	(READ 0 4 & GETS THE FUNCTION WITH POSITIVE DERIVATIVE)
			1062	7001	(SUBI 0 1)
			1063	132	(+ TRIG-TABLE-START 132)
			1064	20005	(READ 0 5 & FUCTION WITH MINUS DERIVATIVE)
			1065	74004	(GET 0 4 & POS SLOPE)
			1066	74105	(GET 1 5 & NEG SLOPE)
			1067	6404	(SUB SIN SIN)
			1070	6505	(SUB COS COS)
			1071	75600	(POPJ)
	MAKE-SNAP	1072	74065	(GET 0 DISPLAY-TOP & SNAP IS TWO WORDS)
			1073	16007	(CMP 0 PC & AND DEY BOTH GOTTA BE DER)
			1074	134022	(BEQ CHECK-INTS)
			1075	20720	(READD PC 0 & POINTER TO TOP OF DATA TO BE COPIED)
			1076	5167	(ADDI 1 PC & FIND THE LENGTH OF THE DISPLAY LIST)
			1077	-170	(- DISPLAY-LIST-START)
			1100	4160	(ADD 1 0 & POINTER TO TOP OF NEW COPY)
	MOVE-SNAP	1101	20720	(READD PC 0 & COPY LOOP)
			1102	10000	(NOP 0 & **** JUST TEMP)
			1103	24120	(WRITED 1 0)
			1104	17007	(CMPI PC)
			1105	167	(- DISPLAY-LIST-START 1)
			1106	133772	(BNE MOVE-SNAP)
			1107	6740	(INC PC)
			1110	6140	(INC 1)
	FLUSH-OLIST	1111	1000	(LOD 0 & REPLACE IT WITH A DISPLAY INSTRUCTION)
			1112	34000	(34000)
			1113	26740	(WRITEI PC 0 & NOTE THIS CAN LOOSE A VECTOR OR SO AT FAST DATA RATES)
			1114	26741	(WRITEI PC 1)
			1115	76765	(PUT PC DISPLAY-TOP)
			1116	51117	(JUMP CHECK-INTS & SHOULD BE POPJI)
	CHECK-INTS	1117	153020	(BIS SERV-INTERUPT)
			1120	75600	(POPJ)	
(& TEXT DISPLAY INTERRUPT ROUTINES) 	
(CALL 200 BLANK) 	
(CALL 100200 BLANKETY-BLANK) 	
(CALL 202 CRSR-IMAGE) 	
(CALL 203 CRSR-COMPL) 	
(CALL 175777 TV-OFF-CONST) 	
(CALL 165777 TV-DARK-CONST) 	
(CALL 163777 TV-GREENBACK-CONST) 	
(CALL 161777 DARK-BLANK-CONST) 	
(CALL 167777 GREEN-BLANK-CONST) 	
(CALL 0 CHARS) 	
(CALL 1 ADR) 	
(CALL 3 DATA) 	
(CALL 4 BLNK) 
	TV-LINE		1121	74170	(GET ADR LINE & START OF CURRENT LINE)
			1122	74023	(GET CHARS XR & SAVE XR)
			1123	76044	(PUT CHARS ISAV-5)
			1124	1000	(LOD CHARS & COUNT THROUGH ALL 36 WORDS IN A LINE)
			1125	-43	(- 43)
			1126	76023	(PUT CHARS XR & USE THE XR FOR A FASTER LOOP)
	CHAR-LOOP	1127	22140	(READI ADR CHARS & NOTE THAT THE XR SHOULD BE SAVED BY WRAP)
			1130	75500	(CHARTV CHARS & SEND THE LOWER BYTE TO THE TV)
			1131	74000	(GET CHARS CHARS & **** YEECH!)
			1132	4010	(ROT CHARS 10)
			1133	75500	(CHARTV CHARS & SEND THE UPPER BYTE TO THE TV)
			1134	74002	(GET CHARS CHAR & **** YEECH!)
			1135	167771	(BXSI CHAR-LOOP)
			1136	75500	(CHARTV CHARS & SEVENTY THIRD CHARACTER)
			1137	74000	(GET CHARS CHARS & **** YEECH!)
			1140	76170	(PUT ADR LINE & UPDATE LINE TO BE DISPLAYED)
			1141	74141	(GET ADR ISAV-2 & RESTORE REGISTERS)
			1142	74044	(GET CHARS ISAV-5)
			1143	76023	(PUT CHARS XR)
			1144	74040	(GET CHARS ISAV-1)
			1145	51117	(JUMP CHECK-INTS & POPJI)	
(CALL 0 X) 	
(& CALL 1 ADR) 	
(& CALL 3 DATA) 	
(CALL 4 CNT) 
	TV-PAGE		1146	74047	(GET X SCR-VALUE & SEND SCROLL AND RESET INTERRUPT)
			1147	76022	(PUT X SCROLL)
			1150	74076	(GET X FLASH-TIME & CHECK STATE OF TEXT DISPLAY)
			1151	10000	(NOP X)
			1152	134004	(BEQ PAGE-NORM & 0 IS NORMAL)
			1153	4020	(DEC X)
			1154	76076	(PUT X FLASH-TIME)
			1155	130004	(BNE PAGE-END & GREATER THAN 1 IS TEMP OFF FOR BELL FL)
			1156	41201	(PUSHJ TV-ACTIVE & TURN IT BACK ON SINCE ITS READY)
	PAGE-NORM	1157	1000	(LOD X & START PAGE AT BEGINNING OF BUFFER)
			1160	5710	(TEXT-START)
			1161	76070	(PUT X LINE)
	PAGE-END	1162	74141	(GET 1 ISAV-2 & RESTORE REGISTERS)
			1163	74040	(GET X ISAV-1)
			1164	51117	(JUMP CHECK-INTS & POPJI)	
(& EDIT ROUTINES FOR TEXT DISPLAY) 	
(& CALL 0 X) 	
(& CALL 0 CHARS) 	
(& CALL 1 ADR) 	
(CALL 2 CHAR) 	
(& CALL 3 DATA) 	
(& CALL 4 BLNK) 	
(& CALL 4 CNT) 	
(CALL 4 TOP) 	
(CALL 5 COL) 	
(CALL 5 XCP) 	
(CALL 6 HALF) 	
(CALL 7 ZERO) 
	TV-OFF		1165	1100	(LOD 1)
			1166	175777	(TV-OFF-CONST)
			1167	51203	(JUMP TV-COLOR)
	TV-FLASH	1170	1000	(LOD X & FLASH FOR CTRL-G 10 60"S OF A SEC)
			1171	10	(10)
			1172	76076	(PUT X FLASH-TIME)
	TV-GREENBACK	1173	1100	(LOD 1 & GREEN WOITH DARK CHARS)
			1174	163777	(TV-GREENBACK-CONST)
			1175	51203	(JUMP TV-COLOR)
	TV-BLANK	1176	1100	(LOD 1)
			1177	167777	(GREEN-BLANK-CONST)
			1200	51203	(JUMP TV-COLOR)
	TV-ACTIVE	1201	1100	(LOD 1 & GREEN CHARS ON FIELD EBONY)
			1202	165777	(TV-DARK-CONST)
	TV-COLOR	1203	74066	(GET X DSR-STATE & EXPECTS ARGUMENT IN 1)
			1204	1040	(ANDI X X)
			1205	161777	(161777)
			1206	60	(NOR X X)
			1207	41	(AND X 1)
			1210	60	(NOR X X)
	UPDATE-DSR	1211	76066	(PUT X DSR-STATE)
			1212	50770	(JUMP PUT-DSR)	
(& INTERRUPTABLE ROUTINES) 
	TV-INIT		1213	1100	(LOD ADR)
			1214	7777	(TEXT-END)
			1215	1400	(LOD CNT)
			1216	2066	(2066 & TEXT BUFFER LENGTH MINUS 2)
			1217	1700	(LOD ZERO & TWO BLANKS)
			1220	100200	(BLANKETY-BLANK)
	BLANKS-LOOP	1221	24127	(WRITED ADR ZERO)
			1222	4420	(DEC CNT)
			1223	127775	(BPL BLANKS-LOOP)
			1224	76171	(PUT ADR CRSR-LINE)
			1225	6707	(SUB ZERO ZERO & MAKE A ZERO)
			1226	76772	(PUT ZERO CRSR-COL & CRSR IS INITIALLY AT BEGINNING OF FIRST LINE)
			1227	1300	(LOD DATA)
			1230	100202	(100202 & CRSR IN POSITION 0 BLANK IN POSITION 1)
			1231	24103	(WRITE ADR DATA)
			1232	1300	(LOD DATA)
			1233	200	(BLANK)
			1234	76373	(PUT DATA CRSR-REPL)
			1235	76747	(PUT ZERO SCR-VALUE)
			1236	41165	(PUSHJ TV-OFF & TURN OFF TV FOR WRITING CRSR IN FONT)
	CRSR-INIT	1237	1400	(LOD CNT & AN ALLWHITE CRSR)
			1240	17	(17 & AT CHAR NUMBER 202 IN THE FONT)
			1241	1100	(LOD ADR)
			1242	174040	(+ 170000 * 202 20)
			1243	1700	(LOD ZERO)
			1244	177777	(177777)
	CRSR-LOOP	1245	26147	(WRITEI ADR ZERO)
			1246	4420	(DEC CNT)
			1247	127775	(BPL CRSR-LOOP)
			1250	75500	(GET 15 X & RESET LINE INTERUPT)
			1251	76022	(PUT X SCROLL & RESET CLOCK INTERUPT)
			1252	75500	(CHARTV X & RESET LINE INTERUPT)
			1253	41201	(PUSHJ TV-ACTIVE & MAKE SURE TV IS ON DISPLAYING GREEN CHARS)
			1254	51117	(JUMP CHECK-INTS & POPJI)
	TV-CHAR		1255	1242	(ANDI CHAR CHAR)
			1256	177	(177)
			1257	17002	(CMPI CHAR)
			1260	37	(37)
			1261	124026	(BPL CTRL-CHAR)
			1262	17002	(CMPI CHAR)
			1263	177	(177)
			1264	134060	(BEQ NULL)
	BIG-CHAR	1265	74002	(GET 0 2 & FOR BIG FONT)
			1266	4016	(ROT 0 -2 & MULTIPLY BY 4)
			1267	5060	(ADDI 0 0)
			1270	4546	(BIGFONT-START)
			1271	22042	(READI 0 2 & FIRST QUARTER OF CHAR)
			1272	41305	(PUSHJ INSERT & PUT IT IN TEXT BUFFER AND IINC POINTER)
			1273	22042	(READI 0 2 & SECOND QUARTER OF CHAR)
			1274	41405	(PUSHJ WRITE-CHAR & PUT IT IN AND DONT INC)
			1275	41524	(PUSHJ DOWN-CRSR)
			1276	41400	(PUSHJ DEC-CRSR)
			1277	22042	(READI 0 2 & 3RD QUARTER OF CHAR)
			1300	41305	(PUSHJ INSERT)
			1301	22042	(READI 0 2 & LAST QUARTER)
			1302	41305	(PUSHJ INSERT)
			1303	41512	(PUSHJ UP-CRSR)
			1304	51117	(JUMP CHECK-INTS & POPJI)
	INSERT		1305	41405	(PUSHJ WRITE-CHAR)
			1306	41371	(PUSHJ INC-CRSR)
			1307	51117	(JUMP CHECK-INTS & POPJI)
	CTRL-CHAR	1310	17002	(CMPI CHAR)
			1311	7	(7)
			1312	134033	(BEQ BELL)
			1313	4205	(ROT CHAR 5)
			1314	120014	(BMI HI-CTRL & LOOK AT FIFTH BIT)
			1315	4217	(ROT CHAR -1 & LOOK AT FOURTH BIT)
			1316	124026	(BPL NULL)
			1317	4217	(ROT CHAR -1)
			1320	72200	(DIS BUS 7)
			1321	51377	(JUMP SUPER-BACKSPACE & 0 CHARACTER 10)
			1322	51201	(JUMP TV-ACTIVE & 4 CHARACTER 14)
			1323	51536	(JUMP SUPER-LINEFEED & 2 CHARACTER 12)
			1324	51173	(JUMP TV-GREENBACK & 6 CHARACTER 16)
			1325	51350	(JUMP TAB & 1 CHARACTER 11)
			1326	51436	(JUMP CAR-RET & 5 CHARACTER 15)
			1327	51532	(JUMP SUPER-DOWN-CRSR & 3 CHARACTER 13)
			1330	51574	(JUMP TOGGLE-CURSOR & 7 CHARACTER 17)
	HI-CTRL		1331	4217	(ROT CHAR -1 & LOOK AT FOURTH BIT)
			1332	124012	(BPL NULL)
			1333	4217	(ROT CHAR -1)
			1334	72200	(DIS BUS 7)
			1335	51370	(JUMP SUPER-INC-CRSR & 0 CHARACTER 30)
			1336	51426	(JUMP HOME-DOWN & 4 CHARACTER 34)
			1337	51511	(JUMP SUPER-UP-CRSR & 2 CHARACTER 32)
			1340	51443	(JUMP SUPER-CLR-EOL & 6 CHARACTER 36)
			1341	51377	(JUMP SUPER-BACKSPACE & 1 CHARACTER 31)
			1342	51416	(JUMP HOME-UP & 5 CHARACTER 35)
			1343	51345	(JUMP NULL & 3 CHARACTER 33)
			1344	51460	(JUMP CLR-EOF & 7 CHARACTER 37)
	NULL		1345	51117	(JUMP CHECK-INTS & POPJI FOR LOTS OF THINGS)
	BELL		1346	41170	(PUSHJ TV-FLASH)
			1347	51117	(JUMP CHECK-INTS & POPJI)
	TAB		1350	74072	(GET X CRSR-COL)
			1351	1040	(ANDI X X)
			1352	7	(7)
			1353	7000	(SUBI X X)
			1354	7	(7)
			1355	1200	(LOD CHAR)
			1356	200	(BLANK)
	TAB-STEP	1357	41405	(PUSHJ WRITE-CHAR)
			1360	41371	(PUSHJ INC-CRSR)
			1361	4020	(DEC X)
			1362	127774	(BPL TAB-STEP)
			1363	51117	(JUMP CHECK-INTS & POPJI)
	TV-QUOTE	1364	1242	(ANDI CHAR CHAR)
			1365	177	(177)
			1366	41265	(PUSHJ BIG-CHAR)
			1367	51117	(JUMP CHECK-INTS & POPJI)
	SUPER-INC-CRSR	1370	41371	(PUSHJ INC-CRSR & DOUBLE SPACE)
	INC-CRSR	1371	74572	(GET COL CRSR-COL)
			1372	17005	(CMPI COL)
			1373	107	(107)
			1374	134001	(BEQ END-L)
			1375	41560	(PUSHJ MOVE-RIGHT)
	END-L		1376	51117	(JUMP CHECK-INTS & POPJI)
	SUPER-BACKSPACE	1377	41400	(PUSHJ DEC-CRSR)
	DEC-CRSR	1400	74572	(GET COL CRSR-COL)
			1401	10500	(NOP COL)
			1402	134001	(BEQ BEGIN-L)
			1403	41566	(PUSHJ MOVE-LEFT)
	BEGIN-L		1404	51117	(JUMP CHECK-INTS & POPJI)
	WRITE-CHAR	1405	74174	(GET 1 HIDE-CURSOR & IF IT (QUOTE S) HIDEN WE NEED TO BRUTE FORCE IT)
			1406	10100	(NOP 1 & GET LOSES ON CONDITIONALS)
			1407	134004	(BEQ NOT-HIDDEN & ITS NOT HIDDEN)
			1410	41605	(PUSHJ REALLY-SWAP & GET THE CHAR IN CURSOR REPL)
			1411	76273	(PUT CHAR CRSR-REPL & WRITE NEW CHAR)
			1412	41605	(PUSHJ REALLY-SWAP & RESTORE STATE)
			1413	51117	(JUMP CHECK-INTS)
	NOT-HIDDEN	1414	76273	(PUT CHAR CRSR-REPL)
			1415	51117	(JUMP CHECK-INTS & POPJI)
	HOME-UP		1416	41602	(PUSHJ SWAP & PUTS CRSR AT LOWER LEFT CORNER OF SCREEN)
			1417	6505	(SUB COL COL)
			1420	76572	(PUT COL CRSR-COL)
			1421	1500	(LOD COL)
			1422	5710	(TEXT-START)
			1423	76571	(PUT COL CRSR-LINE)
			1424	41602	(PUSHJ SWAP)
			1425	51117	(JUMP CHECK-INTS & POPJI)
	HOME-DOWN	1426	41602	(PUSHJ SWAP & PUTS CRSR AT UPPER LEFT CORNER OF SCREEN)
			1427	6505	(SUB COL COL)
			1430	76572	(PUT COL CRSR-COL)
			1431	1500	(LOD COL)
			1432	7670	(+ TEXT-START * 44 34 & BEGINNING OF LAST LINE)
			1433	76571	(PUT COL CRSR-LINE)
			1434	41602	(PUSHJ SWAP)
			1435	51117	(JUMP CHECK-INTS & POPJI)
	CAR-RET		1436	41602	(PUSHJ SWAP & PUTS CRSR AT BEGINNING OF CURRENT LINE)
			1437	6505	(SUB COL COL)
			1440	76572	(PUT COL CRSR-COL)
			1441	41602	(PUSHJ SWAP)
			1442	51117	(JUMP CHECK-INTS & POPJI)
	SUPER-CLR-EOL	1443	41524	(PUSHJ DOWN-CRSR)
			1444	41446	(PUSHJ CLR-EOL & DOES DOUBLE CLR-EOL FOR BIGFONT)
			1445	41512	(PUSHJ UP-CRSR)
	CLR-EOL		1446	41602	(PUSHJ SWAP)
			1447	41470	(PUSHJ EO-SUBR1 & CLEARS TO END OF LINE)
	BLANK-THEM-EOL	1450	1400	(LOD CNT & AND THEN BLANK THE REST OF THE LINE)
			1451	42	(42)
			1452	6561	(ARS COL 1)
			1453	6405	(SUB CNT COL)
			1454	4420	(DEC CNT)
			1455	41634	(PUSHJ BLANKER-LOOP)
			1456	41602	(PUSHJ SWAP)
			1457	51117	(JUMP CHECK-INTS & POPJI)
	CLR-EOF		1460	41602	(PUSHJ SWAP)
			1461	41470	(PUSHJ EO-SUBR1 & CLEARS TO END OF PAGE)
	BLANK-THEM-EOF	1462	1400	(LOD CNT)
			1463	7777	(TEXT-END)
			1464	6401	(SUB CNT ADR)
			1465	41634	(PUSHJ BLANKER-LOOP)
			1466	41602	(PUSHJ SWAP)
			1467	51117	(JUMP CHECK-INTS & POPJI)
	EO-SUBR1	1470	74572	(GET COL CRSR-COL & DIVIDES COL BY 2 TO GET ADR IN TEXT BUFFER)
			1471	74171	(GET ADR CRSR-LINE & AND SETS CONDITION ON LOWEST BIT TO SEE)
			1472	6561	(ARS COL 1 & IF CRSR IS IN LOWER OR UPPER BYTE)
			1473	4165	(ADD ADR COL)
			1474	74572	(GET COL CRSR-COL)
			1475	14501	(T ROT COL 1)
			1476	72340	(DIS BUS 1)
			1477	75600	(POPJ & IF CURSOR IS IN LOWER BYTE)
	EO-SUBR2	1500	20103	(READ ADR DATA & ELSE BLANK UPPER BYTE)
			1501	1343	(ANDI DATA DATA)
			1502	377	(377)
			1503	3303	(IORI DATA DATA)
			1504	100000	(100000)
			1505	26143	(WRITEI ADR DATA)
			1506	5565	(ADDI COL COL)
			1507	2	(2)
			1510	75600	(POPJ)
	SUPER-UP-CRSR	1511	41512	(PUSHJ UP-CRSR & DOUBLE UP-CRSR)
	UP-CRSR		1512	41602	(PUSHJ SWAP)
			1513	74171	(GET ADR CRSR-LINE)
			1514	17001	(CMPI ADR)
			1515	5710	(TEXT-START)
			1516	134003	(BEQ END-UP)
			1517	5161	(ADDI ADR ADR)
			1520	-44	(-44)
			1521	76171	(PUT ADR CRSR-LINE)
	END-UP		1522	41602	(PUSHJ SWAP)
			1523	51117	(JUMP CHECK-INTS & POPJI)
	DOWN-CRSR	1524	41602	(PUSHJ SWAP)
			1525	74171	(GET ADR CRSR-LINE & MOVE THE CURSOR DOWN)
			1526	5161	(ADDI ADR ADR & DOESN (QUOTE T) CHECK FOR)
			1527	44	(44 & BOTTOM OF SCREEN)
			1530	76171	(PUT ADR CRSR-LINE & RESTORE IT)
			1531	51556	(JUMP END-LF)
	SUPER-DOWN-CRSR	1532	74171	(GET ADR CRSR-LINE & TEST FOR LAST LINE)
			1533	17001	(CMPI ADR)
			1534	7734	(+ TEXT-START * 44 35 & IF ON LAST LINE DONT DO ANYTHING)
			1535	137607	(BEQ NULL & OTHERWISE DO A LINEFEED)
	SUPER-LINEFEED	1536	41602	(PUSHJ SWAP & MOVES CURSOR STRAIGHT DOWN TO NEXT LINE)
			1537	74171	(GET ADR CRSR-LINE & IF AT BOTTOM OF SCREEN SCROLLS SCREEN UP)
			1540	17001	(CMPI ADR & TEST FOR LAST LINE)
			1541	7670	(+ TEXT-START * 44 34)
			1542	130007	(BNE MID-SCREEN)
			1543	41642	(PUSHJ REALLOC-TXT)
			1544	1100	(LOD ADR & AND THEN BLANK OUT LAST LINE)
			1545	7670	(+ TEXT-START * 44 34)
			1546	1400	(LOD CNT)
			1547	107	(107)
			1550	41634	(PUSHJ BLANKER-LOOP)
			1551	51556	(JUMP END-LF)
	MID-SCREEN	1552	74171	(GET ADR CRSR-LINE)
			1553	5161	(ADDI ADR ADR)
			1554	110	(110)
			1555	76171	(PUT ADR CRSR-LINE)
	END-LF		1556	41602	(PUSHJ SWAP)
			1557	51117	(JUMP CHECK-INTS & POPJI)
	MOVE-RIGHT	1560	41602	(PUSHJ SWAP)
			1561	74572	(GET COL CRSR-COL)
			1562	6540	(INC COL)
			1563	76572	(PUT COL CRSR-COL)
			1564	41602	(PUSHJ SWAP)
			1565	51117	(JUMP CHECK-INTS & POPJI)
	MOVE-LEFT	1566	41602	(PUSHJ SWAP)
			1567	74572	(GET COL CRSR-COL)
			1570	4520	(DEC COL)
			1571	76572	(PUT COL CRSR-COL)
			1572	41602	(PUSHJ SWAP)
			1573	51117	(JUMP CHECK-INTS & POPJI)
	TOGGLE-CURSOR	1574	41602	(PUSHJ SWAP & SWAP THE CURSOR)
			1575	74174	(GET 1 HIDE-CURSOR & TOGGLE ITS STATE)
			1576	161	(NOR 1 1 & BY COMPLEMENTING)
			1577	76174	(PUT 1 HIDE-CURSOR & PUT IT BACK)
			1600	41602	(PUSHJ SWAP & IT ONLY WORKS ONCE)
			1601	51117	(JUMP CHECK-INTS)
	SWAP		1602	74174	(GET ADR HIDE-CURSOR & IF HIDDEN DON (QUOTE T) DO ANYTHING)
			1603	10100	(NOP ADR & GET DOSNT SET CONDITIONALS)
			1604	123312	(BMI CHECK-INTS)
	REALLY-SWAP	1605	74171	(GET ADR CRSR-LINE & SWAPS CRSR WITH CRSR-REPL)
			1606	74572	(GET COL CRSR-COL)
			1607	74773	(GET ZERO CRSR-REPL & THE CHAR THATS GOING TO BE STUCK IN)
			1610	6561	(ARS COL 1 & DIVIDE IT BY 2 TO GET DISTANCE IN BUFFER)
			1611	4165	(ADD ADR COL & ADR OF WORD WITH CRSR IN IT)
			1612	20103	(READ ADR DATA)
			1613	1443	(ANDI TOP DATA & ZERO THE LOWER BYTE RESULT INTO TOP)
			1614	177400	(177400)
			1615	1343	(ANDI DATA DATA & ZERO THE UPPER BYTE RESULT INTO DATA)
			1616	377	(377)
			1617	74572	(GET COL CRSR-COL)
			1620	4501	(ROT COL 1 & UPPER OR LOWER BYTE TO BE REPLACED?)
			1621	120004	(BMI UPPER-BYTE)
			1622	2407	(IOR TOP ZERO & STICK THE REPLACEMENT IN THE LOWER BYTE)
			1623	76373	(PUT DATA CRSR-REPL & USUALLY THE CRSR)
			1624	24104	(WRITE ADR TOP)
			1625	75600	(POPJ)
	UPPER-BYTE	1626	4710	(ROT ZERO 10 & PUT THE CHAR IN THE HIGH BITS)
			1627	2307	(IOR DATA ZERO & STICK IT IN)
			1630	4410	(ROT TOP 10 & PUT THE CRSR IN THE LOW BITS)
			1631	76473	(PUT TOP CRSR-REPL)
			1632	24103	(WRITE ADR DATA)
			1633	75600	(POPJ)
	BLANKER-LOOP	1634	1700	(LOD 7 & BLANKS V4 LOCS FROM V1)
			1635	100200	(BLANKETY-BLANK)
			1636	26147	(WRITEI 1 7 & ARGUMENTS IN 1 AND 4)
			1637	4420	(DEC 4)
			1640	127773	(BPL BLANKER-LOOP)
			1641	75600	(POPJ)
	REALLOC-TXT	1642	1100	(LOD ADR & MOVES TEXT UP ONE LINE FLUSHING FIRST LINE)
			1643	6020	(+ TEXT-START 110 & START READING FROM BEGINNING OF SECOND LINE)
			1644	1700	(LOD 7 & START WRITING INTO BEGINNING OF FIRST LINE)
			1645	5710	(TEXT-START)
	REALLOC-LOOP	1646	22143	(READI ADR DATA)
			1647	41117	(PUSHJ CHECK-INTS & TO AVOID MISSING THING WHILE GRINDING)
			1650	26743	(WRITEI 7 DATA)
			1651	17001	(CMPI ADR)
			1652	10000	(+ TEXT-END 1 & DO IT UNTIL LAST READ IS END OF LAST LINE)
			1653	133772	(BNE REALLOC-LOOP)
			1654	75600	(POPJ)