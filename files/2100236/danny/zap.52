;ZAP
;SYMBOLS IN ZAP:
; A SYMBOL IN ZAP HAS AS ITS VALUE A PROGRAM&
;  THE PROGRAM IS EVALUATED BY RECURSIVE CALLS TO ZAP-EVAL.
;  IF THE ARGUMENT TO ZAP-EVAL IS NUMERIC, IT IS RETURNED AS THE VALUE.
;  IF NIL, THIS SPECIFIES THE NULL VALUE.
;  IF A SYMBOL, ITS VALUE IS RUN AS A PROGRAM AND RETURNED.
;  IF A LIST, CAR OF THE LISP IS THE FUNCTION AND THE REST OF THE LIST
;   ARGUMENTS, LISP STYLE.  UNLESS OTHERWISE NOTED BELOW, ALL FUNCTIONS
;   EVALUATE THEIR ARGS (LISP STYLE) AND ACTUALLY DO SOMETHING ONLY
;   AFTER THE EVALUATION OF THEIR ARGUMENTS HAS FINISHED.
;  IF THE PROGRAM IS STORED AS THE ZAP-MACRO PROPERTY OF THE SYMBOL, IT IS EXPECTED
;   TO RETURN A LIST A VALUES TO BE STORED IN SUCCESSIVE MEMORY LOCATIONS.

(SETQ FILE-LIST-FLAG T)	;CREATE A FILE OF EACH LISTING

(SETQ ZAP-FLAG T)	; LAP IT 

(SETQ L-ZAP-FLAG NIL)	;BOOT LOADER LAP IT

(SETQ ERCHECK-FLAG T)	; ENABLE WARNINGS OF SYMBOL OVERLAPS

(SETQ PO-FLAG T)	; ENABLE LISTING ON PASS 2

(DECLARE (EXPR-HASH T))

(SSTATUS TERPRI T)

(VALRET '/:TCTYP/ WIDTH/ 500000/./ PADCR/=0/
:VP/
)
 
(SETQ LINEL 1176) 	;LISAP DOES LIKE ANY MORE



(SETQ DEFUN T)

(DEFUN LOGAND (X Y) (BOOLE 1 X Y))



(DECLARE (SPECIAL ZAP-SYMTAB I-MEM-LOC PO-FLAG ERCHECK-FLAG TEML TEMLR READER PASS1
          FILE-LIST-FLAG ZAP-FLAG I-MEM-NAME LAST-SYM LOADER-L CLIST WD CURRENT-WORD )
 	 (*FEXPR ZAP LC LR)
	 (*LEXPR ZAPPER)
	 (MAPEX T)
         (FIXSW T))





(DEFUN ZAP FEXPR (NAME)
  (PROG (I-MEM-LOC ZAP-SYMTAB I-MEM-NAME START-ADR
         LAST-SYM T1 U-PROG )
	(COND (FILE-LIST-FLAG (UWRITE)(IOC R)))
	(SETQ I-MEM-NAME (CAR NAME))
	(SETQ U-PROG (EVAL I-MEM-NAME))
	(SETQ START-ADR (COND ((CADR NAME))(0)))
	(COND ((NUMBERP (CAR U-PROG))
		(SETQ START-ADR (CAR U-PROG))
		(SETQ U-PROG (CDR U-PROG))))
	(SETQ I-MEM-LOC START-ADR)
	(SETQ ZAP-SYMTAB NIL)
	(SETQ T1 U-PROG)
L1	(COND ((NULL T1) (GO L2)))
	(ZAP-PASS1 (CAR T1))
	(SETQ T1 (CDR T1))
	(GO L1)
L2	(SETQ I-MEM-LOC START-ADR)
	(SET I-MEM-NAME NIL)
	(SETQ T1 U-PROG)
L3	(COND ((NULL T1) (GO L4)))
	(ZAP-PASS2 (CAR T1))
	(SETQ T1 (CDR T1))
	(GO L3)
L4	(COND (FILE-LIST-FLAG (APPLY 'UFILE (LIST I-MEM-NAME 'LIST))(IOC T)))
	(COND (L-ZAP-FLAG (L-ZAPPER (EVAL I-MEM-NAME))))
	(COND (ZAP-FLAG  (ZAPPER 2 START-ADR (EVAL I-MEM-NAME))))
	(PRINT '(ALL DID))
	(BREAK 'FINISH 'T)
	(RETURN T)))




(DEFUN ZAP-PASS1 (WD) 
  (PROG (CURRENT-WORD)
	(SETQ PASS1 T)
	(SETQ CURRENT-WORD WD)			;FOR DEBUGGING
	(COND ((ATOM WD) 
		(SETQ LAST-SYM WD)
		(SETQ ZAP-SYMTAB 
		    (CONS (CONS WD I-MEM-LOC) 
			  ZAP-SYMTAB)))
	      ((GET (CAR WD) 'ZAP-MACRO)		;CHECK FOR ZAP-MACRO PROP
		    (SETQ I-MEM-LOC
			  (+ (LENGTH (EVAL (GET (CAR WD) 'ZAP-MACRO))) I-MEM-LOC)))
	      ((EQ (CAR WD) 'START )(SETQ I-MEM-LOC (CADR WD)))
	      ((EQ (CAR WD) '&) NIL )
	      ((EQ (CAR WD) 'ZAP-MACRO )
		(PUTPROP (CADR WD) (CADDR WD) 'ZAP-MACRO) )
	      ((EQ (CAR WD) 'CALL)(PRINT WD)
		(ZAP-DEFSYM (CADR WD)
				 (CADDR WD)))
	      (T (GO W1)) )
X	(RETURN NIL)
W1	(SETQ I-MEM-LOC (1+ I-MEM-LOC))
	(RETURN NIL)))


(DEFUN ZAP-DEFSYM (VAL SYM)
  (PROG (TM) 
	(COND ((SETQ TM (ZAP-SYMEVAL SYM))
		(COND ((NOT (EQUAL VAL TM))
			(PRINT (LIST SYM TM 'MULT-DEFINED-SYM ))
			 (BREAK 'LOOSE 'T))))
	      (T (SETQ ZAP-SYMTAB 
			(CONS (CONS SYM VAL)
			      ZAP-SYMTAB))) )
	(RETURN NIL)))

(DEFUN ZAP-SYMEVAL (SYM)
  (PROG (TM)
	(COND ((SETQ TM (GET SYM 'ZAP-SYM))
		(RETURN TM)))
	(SETQ TM ZAP-SYMTAB)
L	(COND ((NULL TM) (RETURN NIL))
	      ((EQ (CAAR TM) SYM)
		(RETURN (CDAR TM))))
	(SETQ TM (CDR TM))
	(GO L)))


;##
(DEFUN ZAP-PASS2 (WD)
  (PROG NIL
	(SETQ PASS1 NIL)
	(COND ((ATOM WD)
		(SETQ LAST-SYM WD)
		(COND ((NOT (EQUAL 
			     (ZAP-SYMEVAL WD)
			     I-MEM-LOC))
			(PRINT '(MY SYMBOLS ARE DIFFERENT FROM PASS1))(BREAK 'LOOSE2 'T))))
	     ((MEMQ (CAR WD) '(ZAP-MACRO CALL)))
	     ((EQ (CAR WD) 'START )(SETQ I-MEM-LOC (CADR WD)))
	     ((EQ (CAR WD) '&)(TYO 11)(PRINT WD))
	     ((GET (CAR WD) 'ZAP-MACRO)
		(LOAD-ZAP-MACRO (EVAL (GET (CAR WD) 'ZAP-MACRO ))))
	     (T (LOAD-MEM-WITH WD)))
X	(RETURN NIL)))

(DEFUN LOAD-ZAP-MACRO (LL)
	(COND 	((NULL LL) NIL)
		(T (LOAD-MEM-WITH (CAR LL))(LOAD-ZAP-MACRO (CDR LL)) ) ))

(DEFUN LOAD-MEM-WITH (WD)
   (PROG (V)
	(SETQ V (WORD-EVAL WD))
	(COND (PO-FLAG
			(TYO 15)
			(TYO 11)
			(COND ((EQ I-MEM-LOC (ZAP-SYMEVAL LAST-SYM))
				(PRINC LAST-SYM)
				(COND ((< (LENGTH (EXPLODE LAST-SYM)) 8)(TYO 11))))
				((TYO 11)))
			(TYO 11)
			(PRINC I-MEM-LOC)
			(TYO 11)
			(PRINC V) 
			(TYO 11)
			(PRINC WD)
			))
	(SET I-MEM-NAME (APPEND (EVAL I-MEM-NAME) (LIST V)))
	(SETQ I-MEM-LOC (1+ I-MEM-LOC))
	(RETURN NIL)))


(DEFUN WORD-EVAL (WD)
  (PROG (COMBINED-VALUE FIELD-VALUE CURRENT-WORD ERCHECK-VALUE)
	(SETQ COMBINED-VALUE 0)		;CAUTION& COMBINED-VALUE CAN BE A BIGNUM
	(SETQ ERCHECK-VALUE 0)		;IF NO FIELD OVERLAP THIS SHOULD BE SAME
	(SETQ CURRENT-WORD WD)		;SO CAN SEE IT WHEN STUFF COMPILED
L	(COND ((AND	ERCHECK-FLAG 
			(NULL WD)     
			(NOT (EQUAL COMBINED-VALUE ERCHECK-VALUE)))
		(PRINT (LIST '(BYTE OVERLAP WARNING ONLY) CURRENT-WORD ))
		(RETURN COMBINED-VALUE))
	      ((OR (EQ (CAR WD) '&) (NULL WD)) (RETURN COMBINED-VALUE))
	      ((NUMBERP (CAR WD))
		(SETQ FIELD-VALUE (CAR WD)))
	      ((ATOM (CAR WD)) 
		(SETQ FIELD-VALUE (ZAP-SYM-RUN (CAR WD))))  )
	(SETQ COMBINED-VALUE (PLUS COMBINED-VALUE FIELD-VALUE))
	(SETQ ERCHECK-VALUE  (BOOLE 7 ERCHECK-VALUE FIELD-VALUE))
	(SETQ WD (CDR WD))
	(GO L)
))


(DEFUN ZAP-SYM-RUN (SYM)
  (PROG (TEM)
	(COND ( PASS1 (RETURN 0))
		((NULL (SETQ TEM (ZAP-SYMEVAL SYM)))
		(PRINT (APPEND '(I AM SORRY BUT I CAN NOT FIND ) (LIST SYM )))
		(RETURN 0))
	      (T (RETURN (ZAP-EVAL TEM))))))

(DEFUN ZAP-EVAL (EXP)      ;EXP A SYMBOL "PROGRAM".RETURNS A NUMBERIC VALUE OR NIL
	(COND ((NULL EXP) 0)
	      ((NUMBERP EXP) EXP)
	      ((ATOM EXP) (ZAP-SYM-RUN EXP))
	      (T (EVAL EXP))) )

; FUNCTIONS TO LOAD 2500 MEMORY

(DEFUN LC FEXPR (IN)		;LOAD WORD IN CRM
	(PROG (TEML)
		(LAPPER 2 (CAR IN)(LIST (WORD-EVAL (CDR IN))) 'TEML)
		(RETURN TEML)) )

(DEFUN LR FEXPR (IN)		;LOAD WORD IN RAM
	(PROG (TEMLR)
		(LAPPER 3 (CAR IN) (LIST (WORD-EVAL (CDR IN))) 'TEMLR)
		(RETURN TEMLR)))

(DEFUN L-ZAPPER (L)
	(PROG (WL CLIST)
		(SETQ WL  L)
LOOP		(COND ((NULL WL)(SETQ LOADER-L (IMPLODE (REVERSE CLIST)))(RETURN T)))
		(RAM-OUT (CAR WL))
		(SETQ WL (CDR WL))
		(GO LOOP)))

(DEFUN MEM-READ NIL
	(PROG (READER)
	L	(LAPPER 4 (READ) NIL 'READER)
		(PRINT READER)
		(GO L)))


(DEFUN DUMP NIL (PROG ()
			(SLEEP 5)
			(PRINC LOADER-L)
			(RETURN T)))


(DEFUN ZAPPER N
	(PROG (CTR CLIST TYPE START OL L FOO)
		(SETQ TYPE (ARG 1))
		(SETQ START (ARG 2))
		(SETQ L (SETQ OL (ARG 3)))
		(SETQ I-MEM-NAME (COND ((> N 3)(ARG 4))(I-MEM-NAME)))
		(SETQ FOO (SETQ CTR (LENGTH L)))
		(RAM-OUT 177777)			;START WORD
		(RAM-OUT START)				;START ADR
		(RAM-OUT CTR)				;BLOCK LENGTH
	LOOP	(COND ((NULL L) (GO DONE)))
		(RAM-OUT (CAR L))			;DATA
		(SETQ L (CDR L))
		(GO LOOP)
	DONE	(RAM-OUT (- (+ TYPE (APPLY '+ OL) START FOO)))	;CHECK SUM
		(SET I-MEM-NAME ( IMPLODE (REVERSE CLIST)))))
		
(DEFUN RAM-OUT (NUM)
	(PROG NIL
		(SETQ NUM (LOGAND 177777 NUM))
		(SETQ CLIST (CONS (ASCII  (+ 100 (LOGAND 17 (LSH NUM -14)))) CLIST))
		(SETQ CLIST (CONS (ASCII  (+ 100 (LOGAND 17 (LSH NUM -10)))) CLIST ))
		(SETQ CLIST (CONS (ASCII  (+ 100 (LOGAND 17 (LSH NUM -4)))) CLIST ))
		(SETQ CLIST (CONS (ASCII  (+ 100 (LOGAND 17  NUM))) CLIST))
		(RETURN T) ))

(DEFUN TRIG-TABLE NIL
	(PROG (A OUT)
		(SETQ A 181.)
	LOOP  	(SETQ OUT (CONS (FIX (TIMES 177777 (SIN (TIMES .01745329 A)))) OUT))
		(SETQ A (1- A))
		(COND ((> A -1)(GO LOOP))(T (RETURN OUT))) ))


;-- INITIAL SYMS


(DEFUN OPER-TYPE (CODE TYPE)
 (PROG (A B C D)
  (SETQ A (LIST CODE (LSH (ZAP-EVAL (CADR WD)) 6 )))
  (SETQ D (APPEND A '(&) WD))
  (COND	((NULL A)(PRINT (APPEND '(NOT ENOUGH ARGS IN) WD)))
        ((EQ TYPE 1)(SETQ WD (CDR WD))(RETURN (WORD-EVAL A)))) 		;INC TYP
  (SETQ B (ZAP-EVAL (CADDR WD)))
  (COND ((NULL B)(PRINT (APPEND '(NOT ENOUGH WORDS IN) WD)))
        ((EQ TYPE 2)(SETQ WD (CDDR WD))(RETURN (WORD-EVAL (CONS B A))))	;ADD TYP
        ((EQ TYPE 3)(SETQ WD (CDDR WD))(RETURN (LIST D (LIST B)))))		;LOD TYP
  (SETQ C (ZAP-EVAL (CADDDR WD)))
  (SETQ A (LIST(CONS B D)
	       (LIST (ZAP-EVAL (CADDDR WD)))))
  (COND ((NULL C)(PRINT (APPEND '(NOT ENOUGH WORDS IN) WD)))
	((EQ TYPE 4)(SETQ WD (CDDDR WD)) (RETURN A))			;ADDI TYP
        (PRINT '(ILGL OPER-TYPE)))))

(DEFPROP PUT	(COND ((< (ZAP-EVAL (CADDR WD)) 8)(PRINT '(USE GET INSTEAD)) 0 )
			(T (OPER-TYPE 076000 2)) ) ZAP-SYM )

(DEFUN BRANCH-TYPE (CODE)
 (PROG2 ()
  (WORD-EVAL (LIST CODE (LOGAND 3777(1- (- (ZAP-EVAL(CADR WD)) I-MEM-LOC )))))
  (SETQ WD NIL)))

(DEFUN DIS-TYPE ()
 (PROG2 ()
  (+ 72000 (COND ((EQ (CADR WD) 'BUS) 0)
		 ((EQ (CADR WD) 'FLAGS) 400)
		 ((EQ (CADR WD) 'INTS) 1000)
		 (T 1400))
	(LSH (- 17 (CADDR WD)) 4)
	(CADDDR WD))
  (SETQ WD NIL)))


(DEFPROP DIS 	(DIS-TYPE) ZAP-SYM)
(DEFPROP ADD	(OPER-TYPE 004060 2) ZAP-SYM )
(DEFPROP ADDI	(OPER-TYPE 014060 2) ZAP-SYM   )
(DEFPROP ADDC	(OPER-TYPE 034060 2) ZAP-SYM )
(DEFPROP SUB	(OPER-TYPE 006000 2) ZAP-SYM )
(DEFPROP SUBI	(OPER-TYPE 016000 2) ZAP-SYM   )
(DEFPROP SUBC	(OPER-TYPE 036000 2) ZAP-SYM )
(DEFPROP INC	(OPER-TYPE 006040 1) ZAP-SYM )
(DEFPROP INCC	(OPER-TYPE 036040 1) ZAP-SYM )
(DEFPROP DEC	(OPER-TYPE 004020 1) ZAP-SYM )
(DEFPROP DECC	(OPER-TYPE 034020 1) ZAP-SYM )
(DEFPROP XADD	(OPER-TYPE 004040 2) ZAP-SYM )
(DEFPROP XADDI	(OPER-TYPE 014040 2) ZAP-SYM   )
(DEFPROP XADDC	(OPER-TYPE 034040 2) ZAP-SYM )
(DEFPROP AND	(OPER-TYPE 000040 2) ZAP-SYM )
(DEFPROP ANDI	(OPER-TYPE 010040 2) ZAP-SYM   )
(DEFPROP ANDC	(OPER-TYPE 030040 2) ZAP-SYM )
(DEFPROP IOR	(OPER-TYPE 002000 2) ZAP-SYM )
(DEFPROP IORI	(OPER-TYPE 012000 2) ZAP-SYM   )
(DEFPROP IORC	(OPER-TYPE 032000 2) ZAP-SYM )
(DEFPROP XOR	(OPER-TYPE 002020 2) ZAP-SYM )
(DEFPROP XORI	(OPER-TYPE 012020 2) ZAP-SYM   )
(DEFPROP XORC	(OPER-TYPE 032020 2) ZAP-SYM )
(DEFPROP NOR	(OPER-TYPE 000060 2) ZAP-SYM )
(DEFPROP NORI	(OPER-TYPE 010060 2) ZAP-SYM   )
(DEFPROP NORC	(OPER-TYPE 030060 2) ZAP-SYM )
(DEFPROP ANDN	(OPER-TYPE 000020 2) ZAP-SYM )
(DEFPROP ANDNI	(OPER-TYPE 010020 2) ZAP-SYM   )
(DEFPROP ANDNC	(OPER-TYPE 030020 2) ZAP-SYM )
(DEFPROP ARS	(OPER-TYPE 006060 2) ZAP-SYM )
(DEFPROP ARSC	(OPER-TYPE 036060 2) ZAP-SYM )
(DEFPROP ROT	(OPER-TYPE 004000 2) ZAP-SYM )
(DEFPROP ROTI	(OPER-TYPE 014000 2) ZAP-SYM   )
(DEFPROP ROTC	(OPER-TYPE 034000 2) ZAP-SYM )
(DEFPROP MROT	(OPER-TYPE 002040 2) ZAP-SYM )
(DEFPROP MROTI	(OPER-TYPE 012040 2) ZAP-SYM   )
(DEFPROP MROTC	(OPER-TYPE 032040 2) ZAP-SYM )
(DEFPROP LOD 	(OPER-TYPE 010000 1) ZAP-SYM   )
(DEFPROP GET	(OPER-TYPE 074000 2) ZAP-SYM )
(DEFPROP READ	(OPER-TYPE 020000 2) ZAP-SYM )
(DEFPROP IREAD	(OPER-TYPE 024040 2) ZAP-SYM )
(DEFPROP DREAD	(OPER-TYPE 022020 2) ZAP-SYM )
(DEFPROP WRITE	(OPER-TYPE 024000 2) ZAP-SYM )
(DEFPROP IWRITE	(OPER-TYPE 026040 2) ZAP-SYM )
(DEFPROP DWRITE	(OPER-TYPE 024020 2) ZAP-SYM )
(DEFPROP LCM	075200 ZAP-SYM )
(DEFPROP JUMP	050000 ZAP-SYM )
(DEFPROP PUSHJ	040000 ZAP-SYM )
(DEFPROP POPJ	070000 ZAP-SYM )
(DEFPROP BEQ	(BRANCH-TYPE 130000 ) ZAP-SYM )
(DEFPROP BNE	(BRANCH-TYPE 134000 ) ZAP-SYM )
(DEFPROP BMI	(BRANCH-TYPE 124000 ) ZAP-SYM )
(DEFPROP BPL	(BRANCH-TYPE 120000 ) ZAP-SYM )
(DEFPROP BCS	(BRANCH-TYPE 100000 ) ZAP-SYM )
(DEFPROP BCC	(BRANCH-TYPE 104000 ) ZAP-SYM )
(DEFPROP BVS	(BRANCH-TYPE 110000 ) ZAP-SYM )
(DEFPROP BVC	(BRANCH-TYPE 114000 ) ZAP-SYM )
(DEFPROP BIS	(BRANCH-TYPE 150000 ) ZAP-SYM )
(DEFPROP BIC	(BRANCH-TYPE 154000 ) ZAP-SYM )
(DEFPROP BFS	(BRANCH-TYPE 170000 ) ZAP-SYM )
(DEFPROP BFC	(BRANCH-TYPE 174000 ) ZAP-SYM )
(DEFPROP BMC	(BRANCH-TYPE 140000 ) ZAP-SYM )
(DEFPROP BMS	(BRANCH-TYPE 144000 ) ZAP-SYM )
(DEFPROP BINC	(BRANCH-TYPE 160000 ) ZAP-SYM )
(DEFPROP BNINC	(BRANCH-TYPE 164000 ) ZAP-SYM )
(DEFPROP ERROR  (+ I-MEM-LOC 050000 ) ZAP-SYM )
(DEFPROP UART	24 ZAP-SYM)
(DEFPROP XR	13 ZAP-SYM)
(DEFPROP ER	(AND (PRINT '(USE XR NOT ER)) 13) ZAP-SYM)
(DEFPROP NOP	0 ZAP-SYM)
(DEFPROP XCOR	20 ZAP-SYM)
(DEFPROP YCOR	21 ZAP-SYM)
(SETQ LOADER-L 'GHAD@L@@DHADGH@@LGOM@LLCDH@OGJL@DH@OGHH@DH@OGJH@@HI@JGOLE@@@DHADDHADDHADDHADG@@@GGN@EHADGIEDA@B@@OOO@H@LAAFE@@@O@D@EG@@@@@@@@@@@@@@@@ ) 
(PRINT '(OK READY))

