;LOADER
(SETQ LOADER '(
(& THE LOADER EXPECTS BLOCKS OF FORM)
(&	-1	(START WORD))
(&	TYPE	OF BLOCK)
(&	START	LOCATION)
(&	COUNT	NUMBER OF WORDS)
(&	<DATA>	BLOCK OF COUNT WORDS)
(&	CHECKSUM = MINUS SUM OF TYPE START COUNT <DATA>)
(& EXCEPT, THE JUMP-BLOCK FORMAT IS)
(&	-1		(START WORD))
(&	1		(TYPE IS JUMP-BLOCK))
(&	63		(CONSTANT USED BY LOADER))
(&	<JUMP LOC>	(DESIRED JUMP INSTRUCTION)(INSTEAD OF COUNT))
(& AND READ-RAM IS)
(&	-1)
(&	4)
(&	0)
(&	<ADR>		(ADDRESS OF MEM TO BE READ))
(& THIS LAST INSTRUCTION WILL BE EXECUTED UPON EXIT FROM LOADER)
(&	(NO CHECKSUM NEEDED))
(& THE ORDER OF JUMP-BLOCK FORMAT IS BECAUSE OF TEMPORARY LOAD HARDWARE CROCK,)
(&  AND SHOULD BE CHANGED TO USE CHECKSUM LATER)

MAIN-LOOP	(1600 FROM 22 $ CLEAR TTY FLAG)
WAIT-LOOP	(JSR READ-WORD2 $ WAIT FOR START WORD)
		(S-1 TO D-1)
		(IFFALSE COND C-UN WAIT-LOOP)
		(INC S-1)
		(IFTRUE COND C-UN WAIT-LOOP)
		(S-2 MINUS D-2 $ INITIALIZE CHECKSUM)
		(JSR READ-WORD)
		(S-1 TO D-3 $	 STORE TYPE IN 3)
		(JSR READ-WORD)
		(S-1 TO D-4 $	 STORE START ADDRESS IN 4)
		(JSR READ-WORD)
		(S-1 TO D-5 $	 STORE COUNT IN 5 AND JUMP LOCATION)
		(DEC S-3)	
LOW-TYPE-ERROR	(IFTRUE COND C-UN LOW-TYPE-ERROR $	 TYPE 0 OR LESS IS ERROR)
		(DEC S-3)
		(IFTRUE COND C-UN LOADER-EXIT $		 TYPE 1 IS A JUMP BLOCK)
		(DEC S-3)
		(IFTRUE COND C-UN LOAD-C-MEM $	 TYPE 2 IS CRM)
		(DEC S-3)
		(IFTRUE COND C-UN LOAD-MAIN-MEM $	 TYPE 3 IS MAIN RAM LOAD)
		(DEC S-3)
		(IFTRUE COND C-UN SHOW 	$	 TYPE 4 IS READ RAM)
HIGH-TYPE-ERROR	(JUMP HIGH-TYPE-ERROR $		 ANY OTHER TYPE IS ERROR)
SHOW		(TO S-4 D-MA	$ LOAD ADR)
		(LOD S-5 $ DATA TO S-5)
		(FROM S-5 D-MD)
		(S-WIR FROM D-5 $ PUT IN IR TO SEE)
		(JUMP CHECK-SUM)
CHECK-SUM	(JSR READ-WORD $	 FINAL SUM SHOULD BE ZERO)
		(S-2 TO D-2 $	 TO GENERATE TEST BIT)
CKS-ER1		(COND C-UN CKS-ER1 $	TO TEST FOR NEGATIVE SUM)
		(DEC S-2)
CKS-ER2		(IFFALSE COND C-UN CKS-ER2 $ 	TO TEST FOR POSITIVE NUMBERS)
		(JUMP MAIN-LOOP)
LOADER-EXIT	(S-5 TO D-1 $	 PUT JUMP INSTRUCTION IN D-1)
		(S-WIR FROM D-4 $	 PUT <JUMP-PLACE> INTO IR)
		(JSR WIR-WORD $	 LOAD JUMP INSTRUCTION INTO JUMP-PLACE)
		(JUMP 63 $		 WILL EXECUTE JUMP INSTRUCTION)

LOAD-C-MEM	(DEC S-5 $		 DECREMENT COUNT)
		(IFTRUE COND C-UN CHECK-SUM)
		(JSR READ-WORD $	 DATA INTO D-1)
		(S-WIR FROM D-4 $	 ADDRESS INTO IR)
		(JSR WIR-WORD $	 WRITE THE DATA INTO CRM)
		(INC S-4 $		 INCREMENT ADDRESS)
		(JUMP LOAD-C-MEM)

WIR-WORD	(S-WCM FROM D-1 $	 WRITES CONTENTS OF D-1 INTO CRM, ADDRESS IN IR)

LOAD-MAIN-MEM	(DEC S-5 $		 DECREMENT COUNT)
		(IFTRUE COND C-UN CHECK-SUM)
		(JSR READ-WORD $	 DATA INTO D-1)
		(S-4 TO D-MA $	 MAIN MEMORY ADDRESS)
		(S-1 TO D-BUS $	 WRITE INTO MAIN MEMORY)
		(INC S-4 $		 INCREMENT ADDRESS)
		(JUMP LOAD-MAIN-MEM)
READ-WORD2	(TTY-WORD HERE $ WAIT FOR START CHAR)
		(JUMP READ-WORD 1)
READ-WORD	(TTY-WORD read-word  $		WAIT FOR FLAG)
		(S-1 FROM 20 $		GET CHAR)
		(1600 FROM 22 $		CLEAR FLAG)
		(S-2 PLUS D-1 $		 ADD TO COUNT)
	 	( RET) 
 )) 