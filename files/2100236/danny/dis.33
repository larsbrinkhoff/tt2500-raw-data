;2500 CONSOLE PROGRAM
(AND  (SETQ DIS '(

(&  INPUT FORMAT )
(&    NORMALLY ALL CHARACTERS COMING IN AT THE INTERFACE PORT ARE DISPLAYED ON THE )
(&    TEXT SCREEN COMMANDS TO THE COMPUTER ARE PREFACED BY A CONTROL Q 21 OCTAL )

(&  GENERAL COMMANDS )

	(CALL 017  FLAG-CHR		& MEANS THAT NEXT CHAR IS COMMAND )

	(CALL 040  NOP-CHR		& JUST GO BACK TO TEXT MODE WITHOUT ANY ACTION )
	(CALL 041  BOOT-CHR		& INITIALZES BOOTSTRAP LOAD )
	(CALL 042  RESET-CHR		& INTIIALIZE PROGRAM )
	(CALL 043  CS-CHR		& CLEARS THE DISPLAY LIST )


(&   CHARACTERS BETWIXT 100 AND 137 OCTAL INCLUSIVE ARIVING AFTER A CONTROL Q WILL )
(&   BE EXPECTED IN GROUPS OF THREE THE 5 LEAST SIGNIFICANT BITS OF THESE 3 CHRS WILL )
(&   BE CONS UP INTO A 15 BIT DISPLAY LIST INSTRUCTION  LAST CHR IS LEAST SIGNIFICANT )
(&   THIS DISPLAY INSTRUCTION IS ADDED TO THE TOP OF THE DISPLAY LIST )

(&  OP CODES ARE AS FOLLOWS )

(&   000XX XXXXX XXXXX		ERROR )
(&   00001 00XXX XXXXX		HOME )
(&   00010 10XXX XXXXX		PENUP )
(&   00010 01XXX XXXXX		ENDSNAP )
(&   00010 11XXX XXXXX		PENDOWN )
(&   00011 00XXX XXXXX		SHOWTURTLE )
(&   00011 01XXX XXXXX		HIDETURTLE )
(&   00011 10XXX XXXXX		BLINK )
(&   00011 11XXX XXXXX		UNBLINK )
(&   0010D DDDDD DDDDD		FORWARD   DISTANCE )
(&   0011D DDDDD DDDDD		BACK   DISTANCE )
(&   0100A AAAAA AAAAA		LEFT   ANGLE )
(&   0101A AAAAA AAAAA		RIGHT   ANGLE )
(&   0110H HHHHH HHHHH		SETHEADING   HEADING )
(&   0111S SSSSS SSSSS		MOVE   SPEED )
(&   1000S SSSSS SSSSS		SPIN   SPEED )
(&   1001S SSSSS SSSSS		UNMOVE   SPEED )
(&   1010S SSSSS SSSSS		UNSPIN   SPEED )
(&   1011A AAAAA AAAAA		DISPLAY   ADDRESS )
(&   1100M MMMMM MMMMM		BLINK   MASK )
(&   1101P PPPPP PPPPP		DOT   PATTERN )
(&   1110R RRRRR RRRRR		CIRCLE   RADIUS )





(&  REGISTER ALLOCATION )

	(CALL 2  XPOS 	& LSB'S OF X POSITION )
	(CALL 3  YPOS 	& LSB'S OF Y POSITION )
	(CALL 4  COS 		& COSINE OF HEADING )
	(CALL 5  SIN 		& SINE OF HEADING )
	(CALL 6  HEADING 	& HEADING OF TURTLE )
	(CALL 7  PC 		& POINTER TO DISPLAY LIST INSTRUTION BEING EXECUTED )

(&  SCRATCH PAD ALLOCATION )

	(CALL 32  CLOCK 		& TIME INCREMENTED EVERY CLOCK CYCLE )
	(CALL 33  IN-BUFFER 		& COMMUNICATIONS LINK INPUT BUFFER POINTER )
	(CALL 34  OUT-BUFFER  		& COMMUNICATIONS LINK OUTPUT BUFFER POINTER )
	(CALL 35  DISPLAY-TOP 		& TOP OF DISPLAY LIST )
	(CALL 36  PEN-STATE 		& ZERO IF DOWN MINUS ONE IF UP )
	(CALL 37  TURTLE-STATE 	& ZERO IF TURTLE IS HIDDEN ELSE MINUS ONE )
	(CALL 40  SCRATCH 		& NEVER TRUST A SUBR TO LEAVE THIS ONE ALONE )
	(CALL 41  SAV0 		& FOR SAVING REGISTER 0 DURING INTERUPTS )
	(CALL 42  SAV1 		& FOR SAVING REGISTER 1 DURING INTERUPTS )
	(CALL 43  SAV2 		& FOR SAVING REGISTER 2 DURING INTERUPTS )
	(CALL 44  SAV3 		& FOR SAVING REGISTER 3 DURING INTERUPTS )
	(CALL 45  SAV4 		& FOR SAVING REGISTER 4 DURING INTERUPTS )
	(CALL 46  SAV5 		& FOR SAVING REGISTER 5 DURING INTERUPTS )
	(CALL 47  SAV6 		& FOR SAVING REGISTER 6 DURING INTERUPTS )
	(CALL 50  SAV7 		& FOR SAVING REGISTER 7 DURING INTERUPTS )
	(CALL 51  SPIN-ANGLE 		& JUST LIKE CLOCK MOD 360 )
	(CALL 52  BACK-SCRATCH 	& NOT FOR SCRATCHING BACKS BUT FOR BACK'S SCRATCHING )


(&  MAIN LOOP OF THE DISPLAY PROGRAM )


WAIT		(PUSHJ	CHECK-INTERUPT )
		(PUSHJ   CHECK-FLAG )
		(GET	0 IN-BUFFER	& CHECK IF THERE ARE CHARACTERS IN THE BUFFER )
		(SUBI	0)
		(IN-BUFFER-START )
		(BNE	SERV-IN-BUFFER )
		(JUMP	WAIT )



CHECK-INTERUPT	(BIS	SERV-INTERUPT )
		(POPJ )

SERV-INTERUPT	(DIS	INTS 3 0)
		(ERROR			& INTERUPT WENT AWAY )
		(JUMP	SERV-TEXT	& TEXTDISPLAY IS 1 )
		(JUMP	SERV-IN		& CHARACTER COMING IN ON INTERFACE )
		(JUMP	SERV-IN		& INTERFACE HAS PRIORITY )


CHECK-FLAG	(BFS	SERV-FLAG )
		(POPJ )

SERV-FLAG	(DIS	FLAGS 7 0 )
		(ERROR			& FLAG WENT AWAY )
		(JUMP	SERV-KEY	& KEYBOARD IS 1 )
		(JUMP	SERV-OUT	& OUTPUT TO INTERFACE IS 2 )
		(JUMP 	SERV-KEY	& KEYBOARD HAS PRIORITY )
		(JUMP	SERV-CLOCK	& REAL TIME CLOCK IS 3 )
		(JUMP 	SERV-KEY	& KEYBOARD HAS PRIORITY)
		(JUMP 	SERV-KEY	& KEYBOARD HAS PRIORITY)
		(JUMP 	SERV-KEY	& KEYBOARD HAS PRIORITY)


SERV-CLOCK	(CLEARCLOCK		& TURN OFF FLAG )
		(GET	0 CLOCK		& INCREMENT CLOCK )
		(INC	0 )
		(PUT	0 CLOCK )
		(GET	0 SPIN-ANGLE	& UPDATE SPIN-ANGLE )
		(LOD	1 )
		(360.)
		(PUSHJ	NORMALIZE )
		(JUMP 	REFRESH		& REFESH DISPLAY			 )


SERV-IN		(GET	0 UART		& RAED THE CHARACTER )
		(GET	1 IN-BUFFER	& GET THE BUFFER ADDRESS )
		(IWRITE	1 0		& STORE AND INCREMENT ADDRESS )
		(PUT	1 IN-BUFFER )
		(POPJ			& ALL INTERUPTS ARE SUBRS )


SERV-KEY	(GET	0 KEY		& READ THE CHARACTER )
		(GET	1 OUT-BUFFER	& PUT IT IN THE OUTPUT BUFFER )
		(IWRITE	1 0 )
		(PUT	1 OUT-BUFFER )
		(POPJ			& ALL INTERUPTS ARE SUBRS )


SERV-OUT	(GET	1 OUT-BUFFER )
		(READ	1 0 )
		(PUT	0 UART		& SEND OUT THE CHARACTER )
		(INC	1 )
		(PUT	1 OUT-BUFFER )
		(POPJ			& ALL INTERUPTS ARE SUBRS )


(&  REFRESH - ONCE EVERY 60TH OF A SEC )

REFRESH		(LOD	PC)
		(DISPLAY-LIST-START )
NEXT		(PUSHJ	CHECK-INTERUPT	& BEFORE DOING ANYTHING )
		(IREAD	PC 0		& INC POINTER AND GET INSTUCTION )
		(GET	1 DISPLAY-TOP )
		(SUB	1 PC		& ARE WE DONE )
		(BEQ	TURTLE		& YES DRAW TURTLE )
		(PUSHJ	DISPATCH	& SO THAT ALL IS SUBR/'S )
		(JUMP	NEXT )

TURTLE		(GET	1 TURTLE-STATE	& THIS DRAWS A TRIANGULAR TURTLE )
		(BEQ	POP-PLACE )
		(LOD	0)
		(90.)
		(PUSHJ	RIGHT )
		(LOD	0)
		(7.)
		(PUSHJ	FORWARD )
		(LOD	0)
		(135.)
		(PUSHJ	RIGHT )
		(LOD	0)
		(10.)
		(PUSHJ	FORWARD )
		(LOD	0)
		(90.)
		(PUSHJ	RIGHT )
		(LOD	0)
		(10.)
		(PUSHJ	FORWARD )
		(LOD	0)
		(135.)
		(PUSHJ	RIGHT )
		(LOD	0)
		(7.)
		(PUSHJ	FORWARD )
		(LOD	0)
		(90.)
		(JUMP	LEFT )


DISPATCH	(ROT	0 15		& MUST LOOK AT THE RIGHT LEFT  BITS )
		(DIS	BUS 15	0	& DISPLAY LIST OP CODES )
		(ERROR			& 0 )
		(JUMP	SPECIAL		& 1 )
		(JUMP	FORWARD		& 2 )
		(JUMP	BACK		& 3 )
		(JUMP	LEFT		& 4 )
		(JUMP	RIGHT		& 5 )
		(JUMP	SETHEADING	& 6 )
		(JUMP	MOVE		& 7 )
		(JUMP	SPIN		& 8 )
		(JUMP	UNMOVE		& 9 )
		(JUMP	UNSPIN		& 10 )
		(JUMP	DISPLAY		& 11 )
		(BLINK			& 12 )
		(DOT			& 13 )
		(ERROR			& 14 )
		(ERROR			& 15 )
SPECIAL		(ROT	0 12		& LOOK AT NEXT MOST SIG BITS )
		(DIS	BUS 7 0		& SPECIAL DISPLAY LIST OP CODES )
		(ERROR			& 0 )
		(JUMP	HOME		& 1 )
		(JUMP	PENUP		& 2 )
		(JUMP	PENDOWN		& 3 )
		(JUMP	SHOWTURTLE	& 4 )
		(JUMP	HIDETURTLE	& 5 )
		(JUMP	ENDSNAP		& 6 )
		(ERROR			& 7 )

(&  DISPLAY LIST INSTRUCTIONS )
(&  SPECIAL INSTRUNTIONS FIRST )

HOME		(PUSHJ CENTER )
		(SUB 0 0 )
		(JUMP SETHEADING )

PENUP		(PENU			& DO IT AND STORE IT )
		(LOD	1		& MINUS ONE MEANS PEN IS UP )
		(177777)
		(PUT	1 PEN-STATE )
		(POPJ )

PENDOWN		(PEND			& DO AND STORE IT )
		(SUB	1 1		& ZERO MEANS PEN IS DOWN )
		(PUT	1 PEN-STATE )
		(POPJ		 )

SHOWTURTLE	(LOD	1		& MINUS ONE MEANS TURTLE IS ON )
		(177777)
		(PUT	1 TURTLE-STATE )
		(POPJ )

HIDETURTLE	(SUB	1 1		& ZERO MEANS TURTLE IS HIDDEN )
		(PUT	1 TURTLE-STATE )
		(POPJ		 )



ENDSNAP		(GET	1 SNAP-STACK	& THIS IS A MACRO POPJ )
		(DEC	1 )
		(PUT	1 SNAP-STACK )
		(READ	1 PC )
		(POPJ )

(&  DISPLAY LIST MACRO INSTRUCTIONS )

FORWARD		(PUSHJ	GETARG		& GET SIGNED ARG )
		(GET	0 0 )
		(BPL	FD		& BUT UNLESS IT IS POSITIVE )
		(SUBI	0 0 )
		(0)
		(JUMP	BACK		& GO BACKWARDS )
FD		(ROT	0 1		& TIMES 2 )
		(INC	0		& PLUS ONE)
		(GET	XR 0)
CONTINUE-FD	(PUT	MAGIC		& MAGIC VECTOR INSTRUCTION )
		(ADD	3 5		& AND ITS HELPER )
		(JUMPW	WRAP		& IF THE MAGIC INSTRUCTION SET THE BIT WE WRAP )
		(POPJ )
WRAP		(PENU			& WE GET HERE IF THE TURTLE WENT OFF THE SCREEN )
		(LOD	0)
		(WRAP-DELAY )
WRAP-LOOP	(PUSHJ	CHECK-INTERUPTS	& KILL ENOUGH TIME FOR THE TURTLE TO GET AROUND )
		(DEC	0 )
		(BPL	WRAP-LOOP )
		(GET	0 XCOR		& SO WE CAN SEE IF IT WRAPS AGAIN )
		(ANDI	0		& IT SHOULD BE JUST NINE BITS )
		(777)
		(PUT	0 XCOR )
		(GET	0 YCOR )
		(ANDI	0)
		(777 )
		(PUT	0 YCOR )
		(JUMP	RESTORE-PEN )


BACK		(PUT	0 BACK-SCRATCH	& SAVE THE MACRO COMMAND )
		(LOD	0)
		(180. )
		(PUSHJ	RIGHT		& THIS MUST NOT USE BACK-SCRATCH )
		(GET	0 BACK-SCRATCH )
		(PUSHJ	FORWARD )
		(LOD	0)
		(180. )
		(JUMP	RIGHT )


LEFT		(PUSHJ	GETARG		& LEFT IS MINUS RIGHT )
LT		(SUB	HEADING 0	& JUMP HERE IF YOU HAVE YOU ARG IN ZERO )
		(PUT	0 HEADING )
		(JUMP	SETH )

RIGHT		(PUSHJ	GETARG		& GET SIGNED ARGUMENT )
RT 		(ADD	0 HEADING	& JUMP HERE IF YOU HAVE YOU ARG IN ZERO )
		(JUMP	SETH )

SETHEADING	(PUSHJ	GETARG		& LEAVE SIGNED ARGUMENT IN ZERO )
SETH		(LOD 	1		& PUSHJ TO HERE IFF ARG IS ALREADY IN ZERO )
		(360. )
		(PUSHJ	NORMLIZE	& NORMALIZE TO -1 > X > 360 )
		(PUT	HEADING 0 )
		(JUMP	TRIG-LOOKUP	& GET SIN AND COS  )

(&  MOVE )




SPIN		(PUSHJ	GETARG )
		(PUT	1 SPIN-ANGLE	& JUST A TIME DEPENDENT RIGHT )
		(PUSHJ	POS-MULTIPLY )
		(JUMP	RT )


(&  UNMOVE )





UNSPIN		(PUSHJ	GETARG )
		(PUT	1 SPIN-ANGLE	& JUST A TIME DEPENDENT LEFT )
		(PUSHJ	POS-MULTIPLY )
		(JUMP	LT )

(&  DISPLAY )



(&  BLINK )


(&  DOT )


(&  UTILITY SUBRS )

POS-MULTIPLY	(PUT	2 SCRATCH	& POS NUM IN 1 TIMES NUM IN 0 TO 0 )
		(LOD	2		& MINUS SIXTEEN )
		(177760)
		(PUT	2 ER		& WE USE THE IR TO ITERATE 16 TIMES )
		(SUB	2 2		& RESULT WILL APPEAR HERE )
POS-MULT-LOOP	(ADD	1 1		& REG ONE MUST BE POSITIVE )
		(ADDC	2 0		& REG ZERO CAN BE EITHER )
		(ADD	2 2		& LEFT SHIFT )
		(BINC	POS-MULT-LOOP )
		(PUT	0 2		& 16 BIT RESULT IN 0 )
		(PUT	2 SCRATCH	& ONLY THE IR IS MESSED UP )
		(POPJ )


RESTORE-PEN	(GET	1 PEN-STATE	& SETS PEN TO WHAT PEN STATE SAYS )
		(PENU )
		(BMI	POP-PLACE )
		(PEND )
		(POPJ )

CENTER		(PENUP			& PUT TURTLE IN CENTER OF SCREEN )
		(LOD	1		& CENTER OF SCREEN )
		(255.)
		(PUT	1 XCOR )
		(PUT	1 YCOR )
		(ADD	XPOS YPOS	& WAIT FOR IT TO GET TO THE CENTER )
		(NOR	XPOS XPOS )
		(PUT	XPOS ER )
CENTERLOOP	(BINC	CENTERLOOP	& THE WORLD/'S TIGHTEST LOOP )
		(JUMP	RESTORE-PEN )

GETARG		(ROT	0 1		& BECAUSE DISPATCH LEFT IT IN A BAD STATE )
		(ANDI	0		& EXTRACTS SIGNED ARG FROM 0 )
		(777)
		(ROT	0 11		& THIS IS HOW WE EXTEND THE SIGN BIT )
		(ARS	0 2 )
		(ARS	0 3 )
POP-PLACE	(POPJ			& POP-PLACE CAN BE ANY POPJ FOR BRANCHING TO )

NORMALIZE	(GET	0 0		& NORMALIZES -1 < CONTENTS OF 0 < CONTENTS OF 1 )
		(BPL	TOO-HIGH )
		(ADD	0 1 )
		(JUMP	NORMALIZE	& KEEP ADDING REG 1 UNTIL IT IS POSITIVE )
TOO-HIGH	(SUB	0 1		& DONE LIKE THIS TO SAVE REGISTERS )
		(BPL	TOO-HIGH )
		(ADD	0 1 )
		(POPJ )

SAVE-STUFF	(PUT	0 SAV0		& PUT WORKING REGISTERS INTO SCRATCH PAD )
		(PUT	1 SAV1 )
		(PUT	2 SAV2 )
		(PUT	3 SAV3 )
		(PUT	4 SAV4 )
		(PUT	5 SAV5 )
		(PUT	6 SAV6 )
		(PUT	7 SAV7 )
		(POPJ )

RESTORE-STUFF	(GET	0 SAV0		& GET WORKING REGISTERS FROM SCRATCH PAD )
		(GET	1 SAV1 )
		(GET	2 SAV2 )
		(GET	3 SAV3 )
		(GET	4 SAV4 )
		(GET	5 SAV5 )
		(GET	6 SAV6 )
		(GET	7 SAV7 )
		(POPJ )



TRIG-LOOKUP	(PUT	1 HEADING	& FINDS SIN AND COS OF HEADING )
		(LOD	0 		& FROM 90 WORD SINE TABLE )
		(90.)
		(SUB	1 0		& WHICH QUADRANT? )
		(BMI	QUAD1 )
		(SUB	1 0 )
		(BMI	QUAD2 )
		(SUB	1 0 )
		(BMI	QUAD3 )
		(SUB	1 0 )
		(BMI	QUAD4 )
		(ERROR			& HEADING IS NOT LESS THAN 360 )

QUAD1		(PUSHJ	GETTRIG		& THIS WILL GET THE RIGHT MAGINTUDES )
		(ADD	SIN 0		& BUT THEY NEED TO BE SORTED WITH )
		(ADD	COS 1		& REAGARD TO SIGN AND PHASE )
		(POPJ )
QUAD2		(PUSHJ	GETTRIG )
		(ADD	SIN 1 )
		(SUB	COS 0 )
		(POPJ )
QUAD3		(PUSHJ	GETTRIG )
		(SUB	SIN 0 )
		(SUB	COS 1 )
		(POPJ )
QUAD4		(PUSHJ	GETTRIG )
		(SUB	SIN 1 )
		(ADD	COS 0 )
		(POPJ )

GETTRIG		(ADD	1 0		& JUST TO GET THINGS POSITIVE )
		(LOD	0)
		(TRIG-TABLE-START )
		(ADD	0 1 )
		(READ	0 4		& GETS THE FUNCTION WITH POSITIVE DERIVATIVE )
		(LOD	0 TRIG-TABLE-END )
		(SUB	0 1 )
		(READ	0 5		& FUCTION WITH MINUS DERIVATIVE )
		(PUT	0 4		& POS SLOPE )
		(PUT	1 5		& NEG SLOPE )
		(SUB	SIN SIN )
		(SUB	COS COS )
		(POPJ )

)) T )  


