	
(& INPUT FORMAT) 	
(& NORMALLY ALL CHARACTERS COMING IN AT THE INTERFACE PORT ARE DISPLAYED ON THE) 	
(& TEXT DISPLAY) 	
(& GRAPHICS COMMANDS ARE PREFACED BY AN ESCAPE CHARACTER 33 OCTAL) 	
(& SPECIAL CHARACTERS) 	
(CALL 0 NUL-CHR & NULL) 	
(CALL 7 BEL-CHR & FLASH SCREEN) 	
(CALL 10 BS-CHR & BACK SPACE) 	
(CALL 11 TAB-CHR & TAB MOD 10) 	
(CALL 12 LF-CHR & LINEFEED) 	
(CALL 13 DOWN-CHR & CURSOR DOWN) 	
(CALL 14 TV-CHR & SETS TV TO GREEN CHRS ON BLACK) 	
(CALL 15 CR-CHR & CARRIAGE RETURN) 	
(CALL 16 RESET-CHR & RESETS TIME TO ZERO) 	
(CALL 21 QUOTE-CHR & NEXT CHR HAS NO SPECIAL MEANING) 	
(CALL 30 RT-CHR & CURSOR RIGHT) 	
(CALL 31 LEFT-CHR & CURSOR LEFT) 	
(CALL 32 UP-CHR & CURSOR UP) 	
(CALL 33 FLAG-CHR & ESCAPE TO COMMAND MODE) 	
(CALL 34 HM-DN-CHR & CURSOR TO LOWER RIGHT CORNER) 	
(CALL 35 HM-UP-CHR & CURSOR TO UPPER RIGHT CORNER) 	
(CALL 36 CLR-EOL & CLEAR FROM CURSOR TO END OF CURRENT LINE) 	
(CALL 37 CLR-EOF & CLEAR TO END OF PAGE) 	
(CALL 177 DEL-CHR & DELETE IS JUST LIKE NULL) 	
(& CHARACTERS BETWIXT 100 AND 137 OCTAL INCLUSIVE ARIVING AFTER AN ESCAPE WILL) 	
(& BE EXPECTED IN GROUPS OF THREE THE 5 LEAST SIGNIFICANT BITS OF THESE 3 CHRS WILL) 	
(& BE CONS UP INTO A 15 BIT DISPLAY LIST INSTRUCTION LAST CHR IS LEAST SIGNIFICANT) 	
(& THIS DISPLAY INSTRUCTION IS ADDED TO THE TOP OF THE DISPLAY LIST) 	
(& OP CODES ARE AS FOLLOWS) 	
(& /000 00X XXX XXX XXX NOP) 	
(& /000 /100 0XX XXX XXX HOME) 	
(& /000 /100 1XX XXX /000 PENDONW) 	
(& /000 /100 1XX XXX /001 SMALL DOT) 	
(& /000 /100 1XX XXX /010 DOT) 	
(& /000 /100 1XX XXX /011 WIDE DOT) 	
(& /000 /100 1XX XXX /100 DASH) 	
(& /000 /100 1XX XXX /101 DASH DOT) 	
(& /000 /100 1XX XXX /110 WIDE DASH) 	
(& /000 /100 1XX XXX /111 PENDOWN) 	
(& /000 /101 0XX XXX XX1 SHOWTURTLE) 	
(& /000 /101 0XX XXX /000 HIDETURTLE) 	
(& /000 /101 1XX XXX XXX ENDSNAP) 	
(& /000 /110 0XX XXX XXX BLINK) 	
(& /000 /110 1XX XXX XX0 WRAP) 	
(& /000 /110 1XX XXX XX1 BOUNCE) 	
(& /000 /111 0XX XXX XXX RESET) 	
(& /000 /111 1XX XXX XXX NOP) 	
(& /001 0DD DDD DDD DDD FORWARD DISTANCE) 	
(& /001 1AA AAA AAA AAA RIGHT ANGLE) 	
(& /010 0HH HHH HHH HHH SETHEADING HEADING) 	
(& /010 1SS SSS SSS SSS MOVE SPEED) 	
(& /011 0SS SSS SSS SSS SPIN SPEED) 	
(& /011 1XX XXX XXX /000 DISPLAY ADDRESS IN NEXT WORD) 	
(& /011 1XX XXX XXX /001 TIMED DISPLAY START TIME STOP TIME ADDRESS) 	
(& /011 1XX XXX XXX /010 X DEPENDENT DISPLAY START X STOP X ADDRESS) 	
(& /011 1XX XXX XXX /011 Y DEPENDENT DISPLAY START Y STOP Y ADDRESS) 	
(& /011 1XX XXX XXX /100 HEADING DEPENTENT DISPLAY START STOP ADDRESS) 	
(& /100 0CC CCC CCC CCC SETXY XCOR YCOR IN NEXT WORD) 	
(& /100 1DD DDD DDD DDD DELTAXY DX DY IN NEXT WORD) 	
(& /101 /000 /000 /000 /000 CLEARSCREEN) 	
(& /101 01N NNN NNN NNN REMOVE -N INSTRUCTIONS FROM THE DISPLAY LIST) 	
(& 11X XXX XXX XXX XXX ERROR) 	
(& GRAHIC REGISTER ALLOCATION) 	
(CALL 2 XPOS & LSB (QUOTE S) OF X POSITION) 	
(CALL 3 YPOS & LSB (QUOTE S) OF Y POSITION) 	
(CALL 4 SIN & SINE OF HEADING) 	
(CALL 5 COS & COSE OF HEADING) 	
(CALL 6 HEADING & HEADING OF TURTLE) 	
(CALL 7 PC & POINTER TO DISPLAY LIST INSTRUTION BEING EXECUTED) 	
(& SCRATCH PAD ALLOCATION) 	
(CALL 40 ISAV-1 & FOR SAVING REGS DURING INTERRUPTS) 	
(CALL 41 ISAV-2) 	
(CALL 42 ISAV-3) 	
(CALL 43 ISAV-4) 	
(CALL 44 ISAV-5) 	
(CALL 45 SCRATCH & NEVER TRUST A SUBR WITH THIS ONE) 	
(CALL 46 TOP-LINE & TOP LINE ON SCREEN) 	
(CALL 47 SCR-VALUE & SCROLL) 	
(CALL 50 BACK-SCRATCH & NOT FOR SCRATCHING BACKS BUT FOR BACK (QUOTE S) SCRATCHING) 	
(CALL 51 CONS-CELL & FOR CONSING UP DISPAY INSTRUCTIONS) 	
(CALL 52 READ-STATE & DEPENDS ON WHAT CHARS HAVE COME IN) 	
(CALL 53 SNAP-STACK & POINTER TO MACRO STACK) 	
(CALL 54 MOVE-PEN & STOREING PEN-STATE WHILE IN MOVE) 	
(CALL 57 SPIN-ANGLE & LIKE CLOCK MODE 360) 	
(CALL 60 WRAP-MODE & ONE IF TURTLE SHOULD WRAP ELSE ZERO) 	
(CALL 61 SYNCH-FLAG & SYMAPHORE TO SYNCHRONIZE REFRESH AND CLOCK) 	
(CALL 62 CLOCK & TIME INCREMENTED EVERY CLOCK CYCLE) 	
(CALL 63 IN-BUFFER & COMMUNICATIONS LINK INPUT BUFFER POINTER) 	
(CALL 64 OUT-BUFFER & COMMUNICATIONS LINK OUTPUT BUFFER) 	
(CALL 65 DISPLAY-TOP & TOP OF DISPLAY LIST) 	
(CALL 66 DSR-STATE & COPY OF DISPLAY STATUS REGISTER) 	
(CALL 67 TURTLE-STATE & ZERO IF TURTLE IS HIDDEN ELSE MINUS ONE) 	
(CALL 70 LINE & START ADDRESS OF CURRENT TEXT LINE DISPLAYED) 	
(CALL 71 CRSR-LINE & START ADDRESS OF TEXT LINE WITH CURSOR) 	
(CALL 72 CRSR-COL & TEXT COLUMN 0-71 OF CURSOR) 	
(CALL 73 CRSR-REPL & CHARACTER THAT CURSOR IS SITTING ON) 	
(CALL 76 FLASH-TIME & COUNTER FOR SCREEN FLASH FOR CONTROL-G) 	
(& MEMORY ALLOCATION) 	
(CALL 0 TRIG-TABLE-START) 	
(CALL 133 IN-BUFFER-START) 	
(CALL 144 SNAP-STACK-START) 	
(CALL 170 SNAP-STACK-END) 	
(CALL 170 DISPLAY-LIST-START) 	
(CALL 5546 SNAP-BUFFER-START) 	
(CALL 5710 TEXT-START) 	
(CALL 7777 TEXT-END) 	
(& INTERUPT SERVICE ROUTINE) 
	SERV-INTERUPT	140	76040	(PUT 0 ISAV-1 & IT IS ORE BLESSED TO SERVE THAN TO RECIEVE)
			141	76141	(PUT 1 ISAV-2)
			142	73200	(DIS INTS 7)
			143	50143	(ERROR & INTERUPT WENT AWAY)
			144	51174	(JUMP TV-LINE & TEXTDISPLAY IS 1)
			145	50323	(JUMP SERV-IN & CHARACTER COMING IN ON INTERFACE)
			146	51174	(JUMP TV-LINE & TV-LINE HAS PRIORITY)
			147	50307	(JUMP SERV-CLOCK & 60TH OF A SEC INTERUPT)
			150	51174	(JUMP TV-LINE & TV-LINE HAS PRIORITY)
			151	50307	(JUMP SERV-CLOCK & CLOCK HAS PRIORITY)
			152	51174	(JUMP TV-LINE & THOU SHALT HAVE NO OTHER BEFOR HIM)	
(& INITIALIZE ALL) 
	START		153	40155	(PUSHJ INIT & WE HOPE THIS IS A NOP)
			154	50154	(ERROR & CAUSE THIS MEANS STACK UNDERFLOW)
	INIT		155	6000	(SUB 0 0)
			156	76051	(PUT 0 CONS-CELL)
			157	76052	(PUT 0 READ-STATE)
			160	76057	(PUT 0 SPIN-ANGLE)
			161	76062	(PUT 0 CLOCK)
			162	76061	(PUT 0 SYNCH-FLAG)
			163	76053	(PUT 0 SNAP-STACK)
			164	76063	(PUT 0 IN-BUFFER)
			165	76060	(PUT 0 WRAP-MODE)
			166	6040	(INC 0)
			167	76067	(PUT 0 TURTLE-STATE)
			170	60	(NOR 0 0)
			171	76064	(PUT 0 OUT-BUFFER)
			172	1000	(LOD 0)
			173	170	(DISPLAY-LIST-START)
			174	76065	(PUT 0 DISPLAY-TOP)
			175	1000	(LOD 0)
			176	377	(377)
			177	76021	(PUT 0 XCOR)
			200	76020	(PUT 0 YCOR)
			201	41274	(PUSHJ TV-INIT)
	NEXT-TIME	202	40471	(PUSHJ CENTER)	
(& MAIN LOOP OF THE DISPLAY PROGRAM) 
	WAIT		203	41172	(PUSHJ CHECK-INTS)
			204	40301	(PUSHJ CHECK-FLAG)
			205	74063	(GET 0 IN-BUFFER & CHECK IF THERE ARE CHARACTERS IN THE BUFFER)
			206	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			207	130004	(BNE SERV-IN-BUFFER & IF NOT WAIT SOME MORE)
			210	74061	(GET 0 SYNCH-FLAG & HAS A 60 CYCLE INTERUPT COME ?)
			211	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			212	137770	(BEQ WAIT & IF SO REFRESH VECTORS)
			213	50372	(JUMP REFRESH)
	SERV-IN-BUFFER	214	4020	(DEC 0 & GET A CHAR FROM FIFO)
			215	76063	(PUT 0 IN-BUFFER & COUNT OF STUFF)
			216	5760	(ADDI PC 0)
			217	133	(IN-BUFFER-START & THE END OF THE BUFFER)
	MOVE-FIFO	220	20702	(READ PC 2 & MOVE DOWN THE BUFFER)
			221	10000	(NOP 0 & **** JUUST TEMP)
			222	24721	(WRITED PC 1)
			223	17007	(CMPI PC)
			224	132	(- IN-BUFFER-START 1)
			225	134002	(BEQ GOBBLER & GOBBLES DOWN A CHARACTER)
			226	74102	(GET 1 2)
			227	50220	(JUMP MOVE-FIFO)
	GOBBLER		230	74152	(GET 1 READ-STATE & HAVE WE JUST GOTTEN A FLAG?)
			231	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			232	120016	(BMI QUOTED & NO SPECIAL MEANING)
			233	134021	(BEQ TEXT-ADD & IF NOT TEXT-ADD CHECK FOR FLAG)
			234	74351	(GET 3 CONS-CELL & GET PREVIOUS WORK)
			235	4313	(ROT 3 13)
			236	1042	(ANDI 0 2 & ADD IN 5 BITS)
			237	37	(37)
			240	4063	(ADD 0 3)
			241	76051	(PUT 0 CONS-CELL & SAVE IT)
			242	4120	(DEC 1 & CHANGE STATE)
			243	76152	(PUT 1 READ-STATE)
			244	133736	(BNE WAIT & MORE TO COME)
			245	74365	(GET 3 DISPLAY-TOP & ADD TO DISPLAY LIST)
			246	26340	(WRITEI 3 0)
			247	76365	(PUT 3 DISPLAY-TOP)
			250	50203	(JUMP WAIT)
	QUOTED		251	6101	(SUB 1 1 & TURN OFF QUOTE MODE)
			252	76152	(PUT 1 READ-STATE)
			253	41420	(PUSHJ TV-QUOTE)
			254	50203	(JUMP WAIT)
	TEXT-ADD	255	17002	(CMPI 2 & CHECK FOR QOTE CHR)
			256	21	(QUOTE-CHR)
			257	134010	(BEQ SET-QUOTE)
			260	17002	(CMPI 2 & CHECK FOR ALT MADE CHAR)
			261	33	(FLAG-CHR)
			262	130011	(BNE TEXT-CHAR & FOR TEXT DISPLAY)
			263	76151	(PUT 1 CONS-CELL & IF SO CLEAR CONS-CELL)
			264	1000	(LOD 0 & MAKE READ-STATE 3)
			265	3	(3)
			266	76052	(PUT 0 READ-STATE)
			267	50203	(JUMP WAIT)
	SET-QUOTE	270	1000	(LOD 0 & TURN ON QUOTE MODE FOR ONE CHR)
			271	-1	(-1)
			272	76052	(PUT 0 READ-STATE)
			273	50203	(JUMP WAIT)
	TEXT-CHAR	274	41324	(PUSHJ TV-CHAR)
			275	50203	(JUMP WAIT)
	FLUSH2		276	6740	(INC PC)
	FLUSH1		277	6740	(INC PC)
			300	75600	(POPJ)
	CHECK-FLAG	301	72700	(DIS FLAGS 3)
	POP-PLACE	302	75600	(POPJ)
			303	50337	(JUMP SERV-KEY & KEYBOARD IS 1)
			304	50347	(JUMP SERV-OUT & OUTPUT TO INTERFACE IS 2)
			305	40347	(PUSHJ SERV-OUT & DO THEM BOTH)
			306	50337	(JUMP SERV-KEY)
	SERV-CLOCK	307	74062	(GET 0 CLOCK & INCREMENT CLOCK)
			310	6040	(INC 0)
			311	76062	(PUT 0 CLOCK)
			312	74057	(GET 0 SPIN-ANGLE & UPDATE SPIN-ANGLE)
			313	6040	(INC 0)
			314	1100	(LOD 1)
			315	55000	(* 550 100)
			316	41065	(PUSHJ TOO-LOW & NORMALIZE)
			317	76057	(PUT 0 SPIN-ANGLE)
			320	6040	(INC 0 & TO GARRANTEE A NON ZERO-NUMBER)
			321	76061	(PUT 0 SYNCH-FLAG & AND LET REFRESH START IF WAITING)
			322	51221	(JUMP TV-PAGE)
	SERV-IN		323	74063	(GET 0 IN-BUFFER & PUT IT IN FIFO)
			324	5160	(ADDI 1 0)
			325	133	(IN-BUFFER-START)
			326	6040	(INC 0)
			327	76063	(PUT 0 IN-BUFFER)
			330	74024	(GET 0 UART)
			331	1040	(ANDI 0 0 & UART GIVES RANDOM HIGH BITS)
			332	377	(377)
			333	24100	(WRITE 1 0 & UARTS ARE REALLY SLOW)
			334	74040	(GET 0 ISAV-1)
			335	74141	(GET 1 ISAV-2)
			336	75600	(POPJ & SO THIS CAN NOT BE A JUMP CHECK-INTS)
	SERV-KEY	337	74064	(GET 0 OUT-BUFFER & ADD BUFFER IS JUST ONE LONG)
			340	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			341	124630	(BPL CHECK-INTS & BUT YOU CAN TYPE FASTER THAN 60 CPS)
			342	74026	(GET 0 KEY & BUT NOT FASTER THAN 120 CPS)
			343	1040	(ANDI 0 0 & KEYBOARD GIVES RANDOM HIGH BITS)
			344	377	(377 & GIVE UNTO OUTPUT AS INPUT HAS GIVEN TO YOU)
			345	76064	(PUT 0 OUT-BUFFER)
			346	75600	(POPJ)
	SERV-OUT	347	74064	(GET 0 OUT-BUFFER)
			350	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			351	120620	(BMI CHECK-INTS & IS THERE SOMETHING TO SEND OUT?)
	CHOUT		352	1100	(LOD 1 & THIS ROTEN REVERSER *****)
			353	-7	(-7)
			354	76123	(PUT 1 XR & ONLY FOR THE PERMAMA MACHINE ****)
	AGAIN		355	4161	(ADD 1 1)
			356	4001	(ROT 0 1)
			357	124001	(BPL NBIT)
			360	6140	(INC 1)
	NBIT		361	167773	(BXSI AGAIN & END SICK PATCH ****)
			362	76124	(PUT 1 UART & SEND OUT THE CHARACTER)
			363	10100	(NOP 1 & UARTS ARE SLOW)
			364	10100	(NOP 1 & VERY SLOW)
			365	10100	(NOP 1 & VERY VERY SLOW)
			366	1100	(LOD 1 & MAKE A NOTE THAT THE DEED WAS DONE)
			367	-1	(-1)
			370	76164	(PUT 1 OUT-BUFFER & THIS IS A NEGATIVE NUMBER)
			371	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)	
(& REFRESH - ONCE EVERY 60TH OF A SEC) 
	REFRESH		372	1700	(LOD PC)
			373	170	(DISPLAY-LIST-START)
			374	40471	(PUSHJ CENTER)
			375	76661	(PUT HEADING SYNCH-FLAG & A HANDY ZERO)
			376	74200	(GET XPOS 0)
			377	74300	(GET YPOS 0)
	NEXT		400	22740	(READI PC 0 & INC POINTER AND GET INSTUCTION)
			401	74153	(GET 1 SNAP-STACK & DON'T CHECK DISPLAT TOP INSIDE SNAPS)
			402	10100	(NOP 1 & GET DOESN'T SET CONDITIONS)
			403	130003	(BNE DONT-LOOK-NOW & BUT SOMETHINGS ON THE STACK)
			404	74165	(GET 1 DISPLAY-TOP)
			405	16107	(CMP 1 PC & ARE WE DONE)
			406	120002	(BMI TURTLE & YES DRAW TURTLE)
	DONT-LOOK-NOW	407	40435	(PUSHJ DISPATCH & SO THAT ALL IS SUBR'S)
			410	50400	(JUMP NEXT)
	TURTLE		411	40500	(PUSHJ PEN-DOWN & SHOULD BE DOWN FOR NEXT REFRESH)
			412	74167	(GET 1 TURTLE-STATE & THIS DRAWS A TRIANGULAR TURTLE)
			413	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			414	137565	(BEQ NEXT-TIME & IF IT IS SHOWING)
			415	1700	(LOD PC)
			416	423	(TURTLE-PROG)
	T-LOOP		417	6740	(INC PC)
			420	21000	(CREAD 0)
			421	137560	(BEQ NEXT-TIME & LIST ENDS WITH A 0)
			422	40435	(PUSHJ DISPATCH & EXECUTE IT)
	TURTLE-PROG	423	50417	(JUMP T-LOOP & TAG SHOULD BE HERE)
			424	17646	(17646 & LT 132)
			425	10007	(10000 7 & FD 7)
			426	14207	(14000 207 & RT 207)
			427	10012	(10000 12 & FD 12)
			430	14132	(14000 132 & RT 132)
			431	10012	(10000 12 & FD 12)
			432	14207	(14000 207 & RT 207)
			433	10007	(10000 7 & FD 7)
			434	0	(0 & END-TAG)
	DISPATCH	435	14017	(T ROT 0 -1 & MUST LOOK AT THE MOST SIG BITS)
			436	72000	(DIS BUS 17 & DISPLAY LIST OP CODES)
			437	50437	(ERROR & 0)
			440	50714	(JUMP SETXY & 10)
			441	50752	(JUMP SETHEADING & 4)
			442	50442	(ERROR & 12)
			443	50630	(JUMP FORWARD & 2)
			444	50607	(JUMP CLEAR-DISPLAY & 10)
			445	50756	(JUMP SPIN & 6)
			446	50446	(ERROR & 14)
			447	50457	(JUMP SPECIAL & 1)
			450	50705	(JUMP DELTAXY & 11)
			451	50762	(JUMP MOVE & 5)
			452	50452	(ERROR & 13)
			453	50702	(JUMP RIGHT & 3)
			454	50454	(ERROR & 11)
			455	50525	(JUMP DISPLAY & 7)
			456	50456	(ERROR & 15)
	SPECIAL		457	14013	(T ROT 0 -5 & LOOK AT NEXT MOST SIG BITS)
			460	72200	(DIS BUS 7 & SPECIAL DISPLAY LIST OP CODES)
			461	50472	(JUMP HOME & 0)
			462	50622	(JUMP BLINK & 4)
			463	50504	(JUMP SET-TURTLE & 2)
			464	50155	(JUMP INIT & 6)
			465	50501	(JUMP SET-PEN & 1)
			466	50510	(JUMP SET-WRAP & 5)
			467	50514	(JUMP ENDSNAP & 3)
			470	75600	(POPJ & 7)	
(& DISPLAY LIST INSTRUCTIONS) 	
(& SPECIAL INSTRUNTIONS FIRST) 
	CENTER		471	41045	(PUSHJ T-PENUP)
	HOME		472	1400	(LOD SIN & CENTER OF SCREEN)
			473	377	(377)
			474	74504	(GET COS SIN)
			475	6606	(SUB 6 6 & SO STXY WILL DO A SETHEADING 0)
			476	40724	(PUSHJ STXY)
			477	51042	(JUMP RESTORE-DSR)
	PEN-DOWN	500	6000	(SUB 0 0)
	SET-PEN		501	41047	(PUSHJ SET-DSR-PEN)
			502	76066	(PUT 0 DSR-STATE)
			503	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	SET-TURTLE	504	1040	(ANDI 0 0 & ONE TO SHOW TURTLE 0 TO HIDE HER)
			505	1	(1)
			506	76067	(PUT 0 TURTLE-STATE)
			507	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	SET-WRAP	510	1040	(ANDI 0 0 & ONE SHE WRAPS ZERO SHE DON'T)
			511	1	(1)
			512	76060	(PUT 0 WRAP-MODE)
			513	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	ENDSNAP		514	74153	(GET 1 SNAP-STACK & THIS IS A MACRO POPJ)
			515	10100	(NOP 1 & GET DOESN'T SET CONDITIONALS)
			516	134426	(BEQ MAKE-SNAP & ATTEMPT TO POP MEANS MAKE A SNAP)
			517	4120	(DEC 1)
			520	76153	(PUT 1 SNAP-STACK)
			521	5161	(ADDI 1 1)
			522	144	(SNAP-STACK-START)
			523	20107	(READ 1 PC)
			524	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	DISPLAY		525	14003	(T ROT 0 3 & TO SEE WHAT FLOVOR)
			526	72200	(DIS BUS 7)
			527	50560	(JUMP DO-DISPLAY & 0)
			530	50605	(JUMP GET-TIME & 4)
			531	50601	(JUMP GET-XCOR & 2)
			532	50603	(JUMP GET-YCOR & 6)
			533	50577	(JUMP GET-HEAD & 1)
			534	50534	(ERROR & 5)
			535	50535	(ERROR & 3)
			536	50536	(ERROR & 7)
	GOT-COR		537	1040	(ANDI 0 0 & ONLY NINE BITS)
			540	777	(777)
			541	5060	(ADDI 0 0 & TO MAKE THE CENTER OF SCREEN 0)
			542	-400	(- 400)
	GOT-COND	543	76045	(PUT 0 SCRATCH & SO FETCH-ARG WONT MUNG IT)
			544	41000	(PUSHJ FETCH-ARG & START TIME)
			545	10100	(NOP 1)
			546	137533	(BEQ POP-PLACE)
			547	74145	(GET 1 SCRATCH)
			550	16001	(CMP 0 1 & TIME TO START YET?)
			551	127524	(BPL FLUSH2 & NOT YET)
			552	41000	(PUSHJ FETCH-ARG & STOP TIME)
			553	10100	(NOP 1)
			554	137525	(BEQ POP-PLACE)
			555	74145	(GET 1 SCRATCH)
			556	16001	(CMP 0 1 & TIME TO STOP ?)
			557	123517	(BMI FLUSH1 & YUP STOP)
	DO-DISPLAY	560	41000	(PUSHJ FETCH-ARG & GETS ADR FROM NEXT WD)
			561	10100	(NOP 1)
			562	137517	(BEQ POP-PLACE & END OF DISPLAY LIST)
			563	74153	(GET 1 SNAP-STACK)
			564	5161	(ADDI 1 1)
			565	144	(SNAP-STACK-START)
			566	17001	(CMPI 1)
			567	170	(SNAP-STACK-END)
	ERR5		570	137777	(BEQ ERR5)
			571	24107	(WRITE 1 PC)
			572	74700	(GET PC 0)
			573	74153	(GET 1 SNAP-STACK)
			574	6140	(INC 1)
			575	76153	(PUT 1 SNAP-STACK)
			576	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	GET-HEAD	577	74006	(GET 0 HEADING)
			600	50543	(JUMP GOT-COND)
	GET-XCOR	601	74021	(GET 0 XCOR)
			602	50537	(JUMP GOT-COR)
	GET-YCOR	603	74020	(GET 0 YCOR)
			604	50537	(JUMP GOT-COR)
	GET-TIME	605	74062	(GET 0 CLOCK)
			606	50543	(JUMP GOT-COND)
	CLEAR-DISPLAY	607	41057	(PUSHJ GETARG & FOR CLEARING DISPLAY LIST)
			610	10000	(NOP 0 & NEGATIVE ARG MEANS ITS A DELTA)
			611	124004	(BPL SET-TOP & POSITIVE VAULES BECOME NEW LENGTH)
			612	74165	(GET 1 DISPLAY-TOP)
			613	4061	(ADD 0 1)
			614	4020	(DEC 0 & TO FLUSH ITSELF)
			615	50620	(JUMP PUT-TOP)
	SET-TOP		616	5060	(ADDI 0 0)
			617	170	(DISPLAY-LIST-START)
	PUT-TOP		620	76065	(PUT 0 DISPLAY-TOP)
			621	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	BLINK		622	74162	(GET 1 CLOCK & BLINKS AT ABOUT TWICE A SEC)
			623	4105	(ROT 1 5)
			624	123653	(BMI PEN-DOWN)
	PEN-UP		625	1000	(LOD 0)
			626	7	(7)
			627	50501	(JUMP SET-PEN)
	FORWARD		630	41057	(PUSHJ GETARG & GET SIGNED ARG)
	FD-BK		631	10000	(NOP 0)
			632	124011	(BPL FD & BUT UNLESS IT IS POSITIVE)
			633	40635	(PUSHJ INVERT-STUFF & INVERT SIN COS AND DISTANCE)
			634	40644	(PUSHJ FD & DID YOU NOTICE THE TRICKY SUBROUTINE CALL?)
	INVERT-STUFF	635	7000	(SUBI 0 0 & UN DO IT WITH THE SAME CODE)
			636	0	(0)
			637	7404	(SUBI SIN SIN)
			640	0	(0)
			641	7505	(SUBI COS COS)
			642	0	(0)
			643	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	FD		644	4060	(ADD 0 0 & SHIFT)
			645	7000	(SUBI 0 0 & COMPLEMENT)
			646	1	(1)
			647	76023	(PUT 0 XR)
			650	10000	(NOP 0 & MUST KEEP IT ON THE BUS)
	CONTINUE-FD	651	75400	(MAGIC & MAGIC VECTOR INSTRUCTION)
			652	4365	(ADD 3 5 & AND ITS HELPER)
			653	6305	(SUB 3 5 & **** HARDWARE LOSS ****)
			654	73740	(DIS STARS 1 & SKIP IF NOT WRAP)
			655	50657	(JUMP OFF-SCREEN)
			656	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	OFF-SCREEN	657	74021	(GET 0 XCOR & SO WE CAN SEE IF IT WRAPS AGAIN)
			660	1040	(ANDI 0 0 & IT SHOULD BE JUST NINE BITS)
			661	777	(777)
			662	76021	(PUT 0 XCOR)
			663	74020	(GET 0 YCOR)
			664	1040	(ANDI 0 0)
			665	777	(777)
			666	76020	(PUT 0 YCOR)
			667	74060	(GET 0 WRAP-MODE & WHAT MADE ARE WE IN?)
			670	10000	(NOP 0 & GET DOESN'T SET CONDITIONALS)
			671	130300	(BNE CHECK-INTS & 1 IS FALL MODE)
	WRAP		672	41045	(PUSHJ T-PENUP & WRAP IS ON WHENN SET)
			673	1000	(LOD 0)
			674	400	(400 & WRAP DELAY JUST A GUESS)
	WRAP-LOOP	675	41172	(PUSHJ CHECK-INTS & KILL ENOUGH TIME TO GET AROUND)
			676	4020	(DEC 0)
			677	127775	(BPL WRAP-LOOP)
			700	41042	(PUSHJ RESTORE-DSR)
			701	50651	(JUMP CONTINUE-FD & WE ALL SHOULD)
	RIGHT		702	41057	(PUSHJ GETARG & GET SIGNED ARGUMENT)
	RT		703	4066	(ADD 0 HEADING & JUMP HERE IF YOU HAVE YOU ARG IN ZERO)
			704	50753	(JUMP SETH)
	DELTAXY		705	41057	(PUSHJ GETARG & DELTA X IS IN WORD)
			706	74400	(GET SIN 0)
			707	41000	(PUSHJ FETCH-ARG & DELTA Y IS NEXT IN LINE)
			710	10100	(NOP 1)
			711	134260	(BEQ CHECK-INTS & BUT MAY NOT HAVE ARRIVED YET)
			712	74500	(GET COS 0)
			713	50734	(JUMP DELXY & DO THE DEED)
	SETXY		714	41057	(PUSHJ GETARG & FIRST ARG IN THIS WORD)
			715	5460	(ADDI SIN 0 & NEW X STORED IN SIN)
			716	377	(377 & IN PEOPLE CORDIATES)
			717	41000	(PUSHJ FETCH-ARG & A TWO WORD INSTRUCTION)
			720	10100	(NOP 1)
			721	134250	(BEQ CHECK-INTS & OTHER ARG NOT THERE YET)
			722	5560	(ADDI COS 0 & NEW Y STORED IN COS)
			723	377	(377)
	STXY		724	74021	(GET 0 XCOR & JUMP HERE IF ARGS ARE IN SIN AND COS)
			725	1040	(ANDI 0 0 & THOW SHALT NOT BE RANDOM)
			726	777	(777 & IN THINE HIGHEST PLACES)
			727	74120	(GET 1 YCOR & LEST THY LOWEST BITS BE RANDOM LIKEWISE)
			730	1141	(ANDI 1 1)
			731	777	(777)
			732	6400	(SUB SIN 0 & DETLA X)
			733	6501	(SUB COS 1 & DELTA Y)
	DELXY		734	4411	(ROT SIN 11 & JUMP HERE WITH ARGS IN SIN AND COS)
			735	4511	(ROT COS 11)
			736	1000	(LOD 0 & ALWAYS GOES 400 STEPS)
			737	400	(400 & THERE IS ROOM FOR IMPROVEMENT HERE)
	TESTSHIFT	740	14417	(T ROT SIN 17 & SEE IF THERE IS ROOM)
			741	110006	(BVS GO-FD & TO SHIFT TO SAVE TIME)
			742	14517	(T ROT COS 17 & DITTO)
			743	110004	(BVS GO-FD)
			744	4417	(ROT SIN 17 & DO THE SHIFTS)
			745	4517	(ROT COS 17 & AND THEN GO FD BY LESS)
			746	6061	(ARS 0 1)
			747	50740	(JUMP TESTSHIFT & TRY AGAIN)
	GO-FD		750	40644	(PUSHJ FD)
			751	51075	(JUMP TRIG-LOOKUP & RESTORE SIN AND COS)
	SETHEADING	752	41057	(PUSHJ GETARG & LEAVE SIGNED ARGUMENT IN ZERO)
	SETH		753	41063	(PUSHJ NORMALIZE & PUSHJ TO HERE IF ARG IS ALREADY IN ZERO)
			754	74600	(GET HEADING 0 & BEND DOWN AND TOUCH YOUR TOES)
			755	51075	(JUMP TRIG-LOOKUP & GET SIN AND COS)
	SPIN		756	41057	(PUSHJ GETARG)
			757	74157	(GET 1 SPIN-ANGLE & JUST A TIME DEPENDENT RIGHT)
			760	41004	(PUSHJ POS-MULTIPLY)
			761	50703	(JUMP RT & NOTH'N TO IT)
	MOVE		762	76045	(PUT 0 SCRATCH)
			763	41045	(PUSHJ T-PENUP)
			764	74166	(GET 1 DSR-STATE & OLD STATE IS)
			765	76154	(PUT 1 MOVE-PEN & WHAT TO RESTORE THE PEN TO)
			766	76066	(PUT 0 DSR-STATE & SO PEN WON (QUOTE T) COME UP WHILE WRAPING)
			767	74045	(GET 0 SCRATCH)
			770	41057	(PUSHJ GETARG)
			771	74162	(GET 1 CLOCK)
			772	41004	(PUSHJ POS-MULTIPLY & THIS IS SIMPLE BUT HAS A BUG)
			773	74001	(GET 0 1 & TURTLE WILL JERK WHILE MOVING ON AN ANGLE)
			774	40631	(PUSHJ FD-BK)
			775	74054	(GET 0 MOVE-PEN)
			776	76066	(PUT 0 DSR-STATE & RESTORE)
			777	51043	(JUMP PUT-DSR)	
(& UTILITY SUBRS) 
	FETCH-ARG	1000	74165	(GET 1 DISPLAY-TOP & GET ARG FROM NEXT WORD IN DISPLAY LIST)
			1001	6107	(SUB 1 PC & LEAVE EQ FLAG SET IF ARG NOT THERE)
			1002	22740	(READI PC 0)
			1003	75600	(POPJ)
	POS-MULTIPLY	1004	76245	(PUT 2 SCRATCH & POS NUM IN 1 TIMES NUM IN 0 TO 0)
			1005	1200	(LOD 2)
			1006	-17	(-17)
			1007	76223	(PUT 2 XR & WE USE THE IR TO ITERATE 16 TIMES)
			1010	10000	(NOP 0 & IF NUMBER IN ZERO IS NEG)
			1011	124007	(BPL BOTH-POS)
			1012	41016	(PUSHJ CMPL0 & CMPLEMENT IT)
			1013	41021	(PUSHJ BOTH-POS & MULTIPLY)
			1014	7101	(SUBI 1 1 & COMPLEMENT THE SHORT ANSWER)
			1015	0	(0)
	CMPL0		1016	7000	(SUBI 0 0 & AND CMPLEMENT ANSWER)
			1017	0	(0)
			1020	75600	(POPJ)
	BOTH-POS	1021	6202	(SUB 2 2 & RESULT WILL APPEAR HERE)
	POS-MULT-LOOP	1022	4262	(ADD 2 2 & CLEARS THE CARRY)
			1023	4141	(XADD 1 1 & REG ONE MUST BE POSITIVE)
			1024	34260	(IFC ADD 2 0 & REG ZERO CAN BE EITHER)
			1025	36140	(IFC INC 1 & TO PUT THE HIGH BITS IN 1)
			1026	167773	(BXSI POS-MULT-LOOP)
			1027	4206	(ROT 2 6 & GET NUMBER DIVED BY 100 IN 0)
			1030	1042	(ANDI 0 2 & TEN BITS COME FROM THIS WORD)
			1031	1777	(1777)
			1032	1141	(ANDI 1 1 & SIX FROM THIS ONE)
			1033	77	(77)
			1034	4106	(ROT 1 6)
			1035	4061	(ADD 0 1)
			1036	1140	(ANDI 1 0 & ONLY 11 BITS FOR MOVE)
			1037	777	(777 & DO IT HERE SO THE SIGN IS RIGHT)
			1040	74245	(GET 2 SCRATCH)
			1041	75600	(POPJ)
	RESTORE-DSR	1042	74066	(GET 0 DSR-STATE)
	PUT-DSR		1043	76025	(PUT 0 DSR)
			1044	75600	(POPJ)
	T-PENUP		1045	1000	(LOD 0 & TEMPORARY PEN UP)
			1046	7	(7)
	SET-DSR-PEN	1047	74166	(GET 1 DSR-STATE)
			1050	1141	(ANDI 1 1)
			1051	17777	(17777)
			1052	1040	(ANDI 0 0)
			1053	7	(7)
			1054	4003	(ROT 0 3)
			1055	4061	(ADD 0 1)
			1056	51043	(JUMP PUT-DSR)
	GETARG		1057	4013	(ROT 0 13 & EXTRACTS 11 BIT SIGNED ARG FROM 0)
			1060	6063	(ARS 0 3)
			1061	6062	(ARS 0 2)
			1062	75600	(POPJ)
	NORMALIZE	1063	1100	(LOD 1 & NORMALIZES -1 < REG 0 < 550)
			1064	550	(550)
	TOO-LOW		1065	10000	(NOP 0 & JUMP HERE FOR OTHER NORMS)
			1066	124002	(BPL TOO-HIGH)
			1067	4061	(ADD 0 1)
			1070	51065	(JUMP TOO-LOW & KEEP ADDING REG 1 UNTIL IT IS POSITIVE)
	TOO-HIGH	1071	6001	(SUB 0 1 & DONE LIKE THIS TO SAVE REGISTERS)
			1072	127776	(BPL TOO-HIGH)
			1073	4061	(ADD 0 1)
			1074	75600	(POPJ)
	TRIG-LOOKUP	1075	74106	(GET 1 HEADING & FINDS SIN AND COS OF HEADING)
			1076	1000	(LOD 0 & FROM 110 WORD SINE TABLE)
			1077	132	(132)
			1100	6100	(SUB 1 0 & WHICH QUADRANT?)
			1101	120007	(BMI QUAD1)
			1102	6100	(SUB 1 0)
			1103	120011	(BMI QUAD2)
			1104	6100	(SUB 1 0)
			1105	120013	(BMI QUAD3)
			1106	6100	(SUB 1 0)
			1107	120015	(BMI QUAD4)
			1110	51110	(ERROR & HEADING IS NOT LESS THAN 360)
	QUAD1		1111	41131	(PUSHJ GETTRIG & THIS WILL GET THE RIGHT MAGINTUDES)
			1112	4460	(ADD SIN 0 & BUT THEY NEED TO BE SORTED WITH)
			1113	4561	(ADD COS 1 & REAGARD TO SIGN AND PHASE)
			1114	75600	(POPJ)
	QUAD2		1115	41131	(PUSHJ GETTRIG)
			1116	4461	(ADD SIN 1)
			1117	6500	(SUB COS 0)
			1120	75600	(POPJ)
	QUAD3		1121	41131	(PUSHJ GETTRIG)
			1122	6400	(SUB SIN 0)
			1123	6501	(SUB COS 1)
			1124	75600	(POPJ)
	QUAD4		1125	41131	(PUSHJ GETTRIG)
			1126	6401	(SUB SIN 1)
			1127	4560	(ADD COS 0)
			1130	75600	(POPJ)
	GETTRIG		1131	4160	(ADD 1 0 & JUST TO GET THINGS POSITIVE)
			1132	5061	(ADDI 0 1)
			1133	0	(TRIG-TABLE-START)
			1134	20004	(READ 0 4 & GETS THE FUNCTION WITH POSITIVE DERIVATIVE)
			1135	7001	(SUBI 0 1)
			1136	132	(+ TRIG-TABLE-START 132)
			1137	20005	(READ 0 5 & FUCTION WITH MINUS DERIVATIVE)
			1140	74004	(GET 0 4 & POS SLOPE)
			1141	74105	(GET 1 5 & NEG SLOPE)
			1142	6404	(SUB SIN SIN)
			1143	6505	(SUB COS COS)
			1144	75600	(POPJ)
	MAKE-SNAP	1145	74065	(GET 0 DISPLAY-TOP & SNAP IS TWO WORDS)
			1146	16007	(CMP 0 PC & AND DEY BOTH GOTTA BE DER)
			1147	134022	(BEQ CHECK-INTS)
			1150	20720	(READD PC 0 & POINTER TO TOP OF DATA TO BE COPIED)
			1151	5167	(ADDI 1 PC & FIND THE LENGTH OF THE DISPLAY LIST)
			1152	-170	(- DISPLAY-LIST-START)
			1153	4160	(ADD 1 0 & POINTER TO TOP OF NEW COPY)
	MOVE-SNAP	1154	20720	(READD PC 0 & COPY LOOP)
			1155	10000	(NOP 0 & **** JUST TEMP)
			1156	24120	(WRITED 1 0)
			1157	17007	(CMPI PC)
			1160	167	(- DISPLAY-LIST-START 1)
			1161	133772	(BNE MOVE-SNAP)
			1162	6740	(INC PC)
			1163	6140	(INC 1)
	FLUSH-OLIST	1164	1000	(LOD 0 & REPLACE IT WITH A DISPLAY INSTRUCTION)
			1165	34000	(34000)
			1166	26740	(WRITEI PC 0 & NOTE THIS CAN LOOSE A VECTOR OR SO AT FAST DATA RATES)
			1167	26741	(WRITEI PC 1)
			1170	76765	(PUT PC DISPLAY-TOP)
			1171	51172	(JUMP CHECK-INTS & SHOULD BE POPJI)
	CHECK-INTS	1172	152745	(BIS SERV-INTERUPT)
			1173	75600	(POPJ)	
(& TEXT DISPLAY INTERRUPT ROUTINES) 	
(CALL 200 BLANK) 	
(CALL 100200 BLANKETY-BLANK) 	
(CALL 202 CRSR-IMAGE) 	
(CALL 203 CRSR-COMPL) 	
(CALL 175777 TV-OFF-CONST) 	
(CALL 165777 TV-DARK-CONST) 	
(CALL 173777 TV-GREEN-CONST) 	
(CALL 161777 DARK-BLANK-CONST) 	
(CALL 167777 GREEN-BLANK-CONST) 	
(CALL 0 CHARS) 	
(CALL 1 ADR) 	
(CALL 3 DATA) 	
(CALL 4 BLNK) 
	TV-LINE		1174	74170	(GET ADR LINE & START OF CURRENT LINE)
			1175	74023	(GET CHARS XR)
			1176	76044	(PUT CHARS ISAV-5 & SAVE THE XR)
			1177	1000	(LOD CHARS & COUNT THROUGH ALL 36 WORDS IN A LINE)
			1200	-43	(- 43)
			1201	76023	(PUT CHARS XR & USE THE XR FOR A FASTER LOOP)
	CHAR-LOOP	1202	22140	(READI ADR CHARS & NOTE THAT THE XR SHOULD BE SAVED BY WRAP)
			1203	75500	(CHARTV CHARS & SEND THE LOWER BYTE TO THE TV)
			1204	74000	(GET CHARS CHARS & **** YEECH!)
			1205	4010	(ROT CHARS 10)
			1206	75500	(CHARTV CHARS & SEND THE UPPER BYTE TO THE TV)
			1207	74002	(GET CHARS CHAR & **** YEECH!)
			1210	167771	(BXSI CHAR-LOOP)
			1211	75500	(CHARTV CHARS & SEVENTY THIRD CHARACTER)
			1212	74000	(GET CHARS CHARS & **** YEECH!)
			1213	76170	(PUT ADR LINE & UPDATE LINE TO BE DISPLAYED)
			1214	74141	(GET ADR ISAV-2 & RESTORE REGISTERS)
			1215	74044	(GET CHARS ISAV-5 & RESTORE XR)
			1216	76023	(PUT CHARS XR)
			1217	74040	(GET CHARS ISAV-1)
			1220	51172	(JUMP CHECK-INTS & POPJI)	
(CALL 0 X) 	
(& CALL 1 ADR) 	
(& CALL 3 DATA) 	
(CALL 4 CNT) 
	TV-PAGE		1221	74047	(GET X SCR-VALUE & SEND SCROLL AND RESET INTERRUPT)
			1222	76022	(PUT X SCROLL)
			1223	41605	(PUSHJ SWAP & SWAPS CURSOR OUT TO CHANGE CARTOON FRAME)
			1224	74062	(GET X CLOCK & TIMING CARTOON)
			1225	4001	(ROT X 1 & FIND ADR OF NEXT FRAME)
			1226	1040	(ANDI X)
			1227	17	(17)
			1230	5060	(ADDI X)
			1231	201	(201)
			1232	76073	(PUT X CRSR-REPL & STICK IN NEW FRAME)
			1233	41605	(PUSHJ SWAP)
			1234	74076	(GET X FLASH-TIME & CHECK STATE OF TEXT DISPLAY)
			1235	10000	(NOP X)
			1236	134004	(BEQ PAGE-NORM & 0 IS NORMAL)
			1237	4020	(DEC X)
			1240	76076	(PUT X FLASH-TIME)
			1241	130004	(BNE PAGE-END & GREATER THAN 1 IS TEMP OFF FOR BELL FL)
			1242	41262	(PUSHJ TV-ACTIVE & TURN IT BACK ON SINCE ITS READY)
	PAGE-NORM	1243	1000	(LOD X & START PAGE AT BEGINNING OF BUFFER)
			1244	5710	(TEXT-START)
			1245	76070	(PUT X LINE)
	PAGE-END	1246	74141	(GET 1 ISAV-2 & RESTORE REGISTERS)
			1247	74040	(GET X ISAV-1)
			1250	51172	(JUMP CHECK-INTS & POPJI)	
(& EDIT ROUTINES FOR TEXT DISPLAY) 	
(& CALL 0 X) 	
(& CALL 0 CHARS) 	
(& CALL 1 ADR) 	
(CALL 2 CHAR) 	
(& CALL 3 DATA) 	
(& CALL 4 BLNK) 	
(& CALL 4 CNT) 	
(CALL 4 TOP) 	
(CALL 5 COL) 	
(CALL 5 XCP) 	
(CALL 6 HALF) 	
(CALL 7 ZERO) 
	TV-OFF		1251	1100	(LOD 1)
			1252	175777	(TV-OFF-CONST)
			1253	51264	(JUMP TV-COLOR)
	TV-FLASH	1254	1000	(LOD X & FLASH FOR CTRL-G 10 60"S OF A SEC)
			1255	10	(10)
			1256	76076	(PUT X FLASH-TIME)
	TV-BLANK	1257	1100	(LOD 1)
			1260	167777	(GREEN-BLANK-CONST)
			1261	51264	(JUMP TV-COLOR)
	TV-ACTIVE	1262	1100	(LOD 1 & GREEN CHARS ON FIELD EBONY)
			1263	165777	(TV-DARK-CONST)
	TV-COLOR	1264	74066	(GET X DSR-STATE & EXPECTS ARGUMENT IN R1)
			1265	1040	(ANDI X X)
			1266	161777	(161777)
			1267	60	(NOR X X)
			1270	41	(AND X 1)
			1271	60	(NOR X X)
	UPDATE-DSR	1272	76066	(PUT X DSR-STATE)
			1273	51043	(JUMP PUT-DSR)	
(& INTERRUPTABLE ROUTINES) 
	TV-INIT		1274	1100	(LOD ADR)
			1275	7777	(TEXT-END)
			1276	1400	(LOD CNT)
			1277	2066	(2066 & TEXT BUFFER LENGTH MINUS 2)
			1300	1700	(LOD ZERO & TWO BLANKS)
			1301	100200	(BLANKETY-BLANK)
	BLANKS-LOOP	1302	24127	(WRITED ADR ZERO)
			1303	4420	(DEC CNT)
			1304	127775	(BPL BLANKS-LOOP)
			1305	76171	(PUT ADR CRSR-LINE)
			1306	6707	(SUB ZERO ZERO & MAKE A ZERO)
			1307	76772	(PUT ZERO CRSR-COL & CRSR IS INITIALLY AT BEGINNING OF FIRST LINE)
			1310	1300	(LOD DATA)
			1311	100202	(100202 & CRSR IN POSITION 0 BLANK IN POSITION 1)
			1312	24103	(WRITE ADR DATA)
			1313	1300	(LOD DATA)
			1314	200	(BLANK)
			1315	76373	(PUT DATA CRSR-REPL)
			1316	76747	(PUT ZERO SCR-VALUE)
			1317	75500	(GET 15 X & RESET LINE INTERUPT)
			1320	76022	(PUT X SCROLL & RESET CLOCK INTERUPT)
			1321	75500	(CHARTV X & RESET LINE INTERUPT)
			1322	41262	(PUSHJ TV-ACTIVE & MAKE SURE TV IS ON DISPLAYING GREEN CHARS)
			1323	51172	(JUMP CHECK-INTS & POPJI)
	TV-CHAR		1324	1242	(ANDI CHAR CHAR)
			1325	177	(177)
			1326	17002	(CMPI CHAR)
			1327	37	(37)
			1330	124006	(BPL CTRL-CHAR)
			1331	17002	(CMPI CHAR)
			1332	177	(177)
			1333	134043	(BEQ NULL)
	INSERT		1334	41437	(PUSHJ WRITE-CHAR)
			1335	41424	(PUSHJ INC-CRSR)
			1336	51172	(JUMP CHECK-INTS & POPJI)
	CTRL-CHAR	1337	17002	(CMPI CHAR)
			1340	7	(7)
			1341	134036	(BEQ BELL)
			1342	4205	(ROT CHAR 5)
			1343	120014	(BMI HI-CTRL & LOOK AT FIFTH BIT)
			1344	4217	(ROT CHAR -1 & LOOK AT FOURTH BIT)
			1345	124031	(BPL NULL)
			1346	4217	(ROT CHAR -1)
			1347	72200	(DIS BUS 7)
			1350	51402	(JUMP BACKSPACE & 0 CHARACTER 10)
			1351	51262	(JUMP TV-ACTIVE & 4 CHARACTER 14)
			1352	51547	(JUMP LINEFEED & 2 CHARACTER 12)
			1353	51374	(JUMP RESET-CLOCK & 6 CHARACTER 16)
			1354	51404	(JUMP TAB & 1 CHARACTER 11)
			1355	51461	(JUMP CAR-RET & 5 CHARACTER 15)
			1356	51543	(JUMP DOWN-CRSR & 3 CHARACTER 13)
			1357	51377	(JUMP NULL & 7 CHARACTER 17)
	HI-CTRL		1360	4217	(ROT CHAR -1 & LOOK AT FOURTH BIT)
			1361	124015	(BPL NULL)
			1362	4217	(ROT CHAR -1)
			1363	72200	(DIS BUS 7)
			1364	51424	(JUMP INC-CRSR & 0 CHARACTER 30)
			1365	51451	(JUMP HOME-DOWN & 4 CHARACTER 34)
			1366	51531	(JUMP UP-CRSR & 2 CHARACTER 32)
			1367	51466	(JUMP CLR-EOL & 6 CHARACTER 36)
			1370	51402	(JUMP BACKSPACE & 1 CHARACTER 31)
			1371	51441	(JUMP HOME-UP & 5 CHARACTER 35)
			1372	51377	(JUMP NULL & 3 CHARACTER 33)
			1373	51500	(JUMP CLR-EOF & 7 CHARACTER 37)
	RESET-CLOCK	1374	6000	(SUB 0 0)
			1375	76062	(PUT 0 CLOCK)
			1376	76057	(PUT 0 SPIN-ANGLE)
	NULL		1377	51172	(JUMP CHECK-INTS & POPJI FOR LOTS INCLUDES HI CNTL CHRS 17 TO 30)
	BELL		1400	41254	(PUSHJ TV-FLASH)
			1401	51172	(JUMP CHECK-INTS & POPJI)
	BACKSPACE	1402	41432	(PUSHJ DEC-CRSR)
			1403	51172	(JUMP CHECK-INTS & POPJI)
	TAB		1404	74072	(GET X CRSR-COL)
			1405	1040	(ANDI X X)
			1406	7	(7)
			1407	7000	(SUBI X X)
			1410	7	(7)
			1411	1200	(LOD CHAR)
			1412	200	(BLANK)
	TAB-STEP	1413	41437	(PUSHJ WRITE-CHAR)
			1414	41424	(PUSHJ INC-CRSR)
			1415	4020	(DEC X)
			1416	127774	(BPL TAB-STEP)
			1417	51172	(JUMP CHECK-INTS & POPJI)
	TV-QUOTE	1420	1242	(ANDI CHAR CHAR)
			1421	177	(177)
			1422	41334	(PUSHJ INSERT)
			1423	51172	(JUMP CHECK-INTS & POPJI)
	INC-CRSR	1424	74572	(GET COL CRSR-COL)
			1425	17005	(CMPI COL)
			1426	107	(107)
			1427	134001	(BEQ END-L)
			1430	41571	(PUSHJ MOVE-RIGHT)
	END-L		1431	51172	(JUMP CHECK-INTS & POPJI)
	DEC-CRSR	1432	74572	(GET COL CRSR-COL)
			1433	10500	(NOP COL)
			1434	134001	(BEQ BEGIN-L)
			1435	41577	(PUSHJ MOVE-LEFT)
	BEGIN-L		1436	51172	(JUMP CHECK-INTS & POPJI)
	WRITE-CHAR	1437	76273	(PUT CHAR CRSR-REPL)
			1440	51172	(JUMP CHECK-INTS & POPJI)
	HOME-UP		1441	41605	(PUSHJ SWAP & PUTS CRSR AT LOWER LEFT CORNER OF SCREEN)
			1442	6505	(SUB COL COL)
			1443	76572	(PUT COL CRSR-COL)
			1444	1500	(LOD COL)
			1445	5710	(TEXT-START)
			1446	76571	(PUT COL CRSR-LINE)
			1447	41605	(PUSHJ SWAP)
			1450	51172	(JUMP CHECK-INTS & POPJI)
	HOME-DOWN	1451	41605	(PUSHJ SWAP & PUTS CRSR AT UPPER LEFT CORNER OF SCREEN)
			1452	6505	(SUB COL COL)
			1453	76572	(PUT COL CRSR-COL)
			1454	1500	(LOD COL)
			1455	7734	(+ TEXT-START * 44 35 & BEGINNING OF LAST LINE)
			1456	76571	(PUT COL CRSR-LINE)
			1457	41605	(PUSHJ SWAP)
			1460	51172	(JUMP CHECK-INTS & POPJI)
	CAR-RET		1461	41605	(PUSHJ SWAP & PUTS CRSR AT BEGINNING OF CURRENT LINE)
			1462	6505	(SUB COL COL)
			1463	76572	(PUT COL CRSR-COL)
			1464	41605	(PUSHJ SWAP)
			1465	51172	(JUMP CHECK-INTS & POPJI)
	CLR-EOL		1466	41605	(PUSHJ SWAP)
			1467	41510	(PUSHJ EO-SUBR1 & CLEARS TO END OF LINE)
	BLANK-THEM-EOL	1470	1400	(LOD CNT & AND THEN BLANK THE REST OF THE LINE)
			1471	44	(44)
			1472	6561	(ARS COL 1)
			1473	6405	(SUB CNT COL)
			1474	4420	(DEC CNT)
			1475	41634	(PUSHJ BLANKER-LOOP)
			1476	41605	(PUSHJ SWAP)
			1477	51172	(JUMP CHECK-INTS & POPJI)
	CLR-EOF		1500	41605	(PUSHJ SWAP)
			1501	41510	(PUSHJ EO-SUBR1 & CLEARS TO END OF PAGE)
	BLANK-THEM-EOF	1502	1400	(LOD CNT)
			1503	7777	(TEXT-END)
			1504	6401	(SUB CNT ADR)
			1505	41634	(PUSHJ BLANKER-LOOP)
			1506	41605	(PUSHJ SWAP)
			1507	51172	(JUMP CHECK-INTS & POPJI)
	EO-SUBR1	1510	74572	(GET COL CRSR-COL & DIVIDES COL BY 2 TO GET ADR IN TEXT BUFFER)
			1511	74171	(GET ADR CRSR-LINE & AND SETS CONDITION ON LOWEST BIT TO SEE)
			1512	6561	(ARS COL 1 & IF CRSR IS IN LOWER OR UPPER BYTE)
			1513	4165	(ADD ADR COL)
			1514	74572	(GET COL CRSR-COL)
			1515	14501	(T ROT COL 1)
			1516	72340	(DIS BUS 1)
			1517	75600	(POPJ & IF CURSOR IS IN LOWER BYTE)
	EO-SUBR2	1520	20103	(READ ADR DATA & ELSE BLANK UPPER BYTE)
			1521	1343	(ANDI DATA DATA)
			1522	377	(377)
			1523	3303	(IORI DATA DATA)
			1524	100000	(100000)
			1525	26143	(WRITEI ADR DATA)
			1526	5565	(ADDI COL COL)
			1527	2	(2)
			1530	75600	(POPJ)
	UP-CRSR		1531	41605	(PUSHJ SWAP)
			1532	74171	(GET ADR CRSR-LINE)
			1533	17001	(CMPI ADR)
			1534	5710	(TEXT-START)
			1535	134003	(BEQ END-UP)
			1536	5161	(ADDI ADR ADR)
			1537	-44	(-44)
			1540	76171	(PUT ADR CRSR-LINE)
	END-UP		1541	41605	(PUSHJ SWAP)
			1542	51172	(JUMP CHECK-INTS & POPJI)
	DOWN-CRSR	1543	74171	(GET ADR CRSR-LINE & TEST FOR LAST LINE)
			1544	17001	(CMPI ADR)
			1545	7734	(+ TEXT-START * 44 35 & IF ON LAST LINE DONT DO ANYTHING)
			1546	137630	(BEQ NULL & OTHERWISE DO A LINEFEED)
	LINEFEED	1547	41605	(PUSHJ SWAP & MOVES CURSOR STRAIGHT DOWN TO NEXT LINE)
			1550	74171	(GET ADR CRSR-LINE & IF AT BOTTOM OF SCREEN SCROLLS SCREEN UP)
			1551	17001	(CMPI ADR & TEST FOR LAST LINE)
			1552	7734	(+ TEXT-START * 44 35)
			1553	130007	(BNE MID-SCREEN)
			1554	41642	(PUSHJ REALLOC-TXT)
			1555	1100	(LOD ADR & AND THEN BLANK OUT LAST LINE)
			1556	7734	(+ TEXT-START * 44 35)
			1557	1400	(LOD CNT)
			1560	43	(43)
			1561	41634	(PUSHJ BLANKER-LOOP)
			1562	51567	(JUMP END-LF)
	MID-SCREEN	1563	74171	(GET ADR CRSR-LINE)
			1564	5161	(ADDI ADR ADR)
			1565	44	(44)
			1566	76171	(PUT ADR CRSR-LINE)
	END-LF		1567	41605	(PUSHJ SWAP)
			1570	51172	(JUMP CHECK-INTS & POPJI)
	MOVE-RIGHT	1571	41605	(PUSHJ SWAP)
			1572	74572	(GET COL CRSR-COL)
			1573	6540	(INC COL)
			1574	76572	(PUT COL CRSR-COL)
			1575	41605	(PUSHJ SWAP)
			1576	51172	(JUMP CHECK-INTS & POPJI)
	MOVE-LEFT	1577	41605	(PUSHJ SWAP)
			1600	74572	(GET COL CRSR-COL)
			1601	4520	(DEC COL)
			1602	76572	(PUT COL CRSR-COL)
			1603	41605	(PUSHJ SWAP)
			1604	51172	(JUMP CHECK-INTS & POPJI)
	SWAP		1605	74171	(GET ADR CRSR-LINE & SWAPS CRSR WITH CRSR-REPL)
			1606	74572	(GET COL CRSR-COL)
			1607	74773	(GET ZERO CRSR-REPL & THE CHAR THATS GOING TO BE STUCK IN)
			1610	6561	(ARS COL 1 & DIVIDE IT BY 2 TO GET DISTANCE IN BUFFER)
			1611	4165	(ADD ADR COL & ADR OF WORD WITH CRSR IN IT)
			1612	20103	(READ ADR DATA)
			1613	1443	(ANDI TOP DATA & ZERO THE LOWER BYTE RESULT INTO TOP)
			1614	177400	(177400)
			1615	1343	(ANDI DATA DATA & ZERO THE UPPER BYTE RESULT INTO DATA)
			1616	377	(377)
			1617	74572	(GET COL CRSR-COL)
			1620	4501	(ROT COL 1 & UPPER OR LOWER BYTE TO BE REPLACED?)
			1621	120004	(BMI UPPER-BYTE)
			1622	2407	(IOR TOP ZERO & STICK THE REPLACEMENT IN THE LOWER BYTE)
			1623	76373	(PUT DATA CRSR-REPL & USUALLY THE CRSR)
			1624	24104	(WRITE ADR TOP)
			1625	75600	(POPJ)
	UPPER-BYTE	1626	4710	(ROT ZERO 10 & PUT THE CHAR IN THE HIGH BITS)
			1627	2307	(IOR DATA ZERO & STICK IT IN)
			1630	4410	(ROT TOP 10 & PUT THE CRSR IN THE LOW BITS)
			1631	76473	(PUT TOP CRSR-REPL)
			1632	24103	(WRITE ADR DATA)
			1633	75600	(POPJ)
	BLANKER-LOOP	1634	1700	(LOD 7 & BLANKS V4 LOCS FROM V1)
			1635	100200	(BLANKETY-BLANK)
			1636	26147	(WRITEI 1 7 & ARGUMENTS IN 1 AND 4)
			1637	4420	(DEC 4)
			1640	127773	(BPL BLANKER-LOOP)
			1641	75600	(POPJ)
	REALLOC-TXT	1642	1100	(LOD ADR & MOVES TEXT UP ONE LINE FLUSHING FIRST LINE)
			1643	5754	(+ TEXT-START 44 & START READING FROM BEGINNING OF SECOND LINE)
			1644	1700	(LOD 7 & START WRITING INTO BEGINNING OF FIRST LINE)
			1645	5710	(TEXT-START)
	REALLOC-LOOP	1646	22143	(READI ADR DATA)
			1647	10300	(NOP DATA & BACAUSE OF A HARDWARE BUG)
			1650	26743	(WRITEI 7 DATA)
			1651	17001	(CMPI ADR)
			1652	10000	(+ TEXT-END 1 & DO IT UNTIL LAST READ IS END OF LAST LINE)
			1653	133772	(BNE REALLOC-LOOP)
			1654	75600	(POPJ)